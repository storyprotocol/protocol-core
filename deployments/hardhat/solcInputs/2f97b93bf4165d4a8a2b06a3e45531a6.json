{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/AccessController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { IAccessController } from \"contracts/interfaces/IAccessController.sol\";\nimport { IIPAccountRegistry } from \"contracts/interfaces/registries/IIPAccountRegistry.sol\";\nimport { IModuleRegistry } from \"contracts/interfaces/registries/IModuleRegistry.sol\";\nimport { IPAccountChecker } from \"contracts/lib/registries/IPAccountChecker.sol\";\nimport { IIPAccount } from \"contracts/interfaces/IIPAccount.sol\";\nimport { AccessPermission } from \"contracts/lib/AccessPermission.sol\";\nimport { Errors } from \"contracts/lib/Errors.sol\";\n\n/// @title AccessController\n/// @dev This contract is used to control access permissions for different function calls in the protocol.\n/// It allows setting permissions for specific function calls, checking permissions, and initializing the contract.\n/// The contract uses a mapping to store policies, which are represented as a nested mapping structure.\n/// The contract also interacts with other contracts such as IIPAccountRegistry, IModuleRegistry, and IIPAccount.\n///\n/// Each policy is represented as a mapping from an IP account address to a signer address to a recipient\n/// address to a function selector to a permission level.\n/// The permission level can be 0 (ABSTAIN), 1 (ALLOW), or 2 (DENY).\n///\n/// The contract includes the following functions:\n/// - initialize: Sets the addresses of the IP account registry and the module registry.\n/// - setPermission: Sets the permission for a specific function call.\n/// - getPermission: Returns the permission level for a specific function call.\n/// - checkPermission: Checks if a specific function call is allowed.\ncontract AccessController is IAccessController {\n    using IPAccountChecker for IIPAccountRegistry;\n\n    address public IP_ACCOUNT_REGISTRY;\n    address public MODULE_REGISTRY;\n\n    mapping(address => mapping(address => mapping(address => mapping(bytes4 => uint8)))) public permissions;\n\n    // TODO: can only be called by protocol admin\n    function initialize(address ipAccountRegistry_, address moduleRegistry_) external {\n        IP_ACCOUNT_REGISTRY = ipAccountRegistry_;\n        MODULE_REGISTRY = moduleRegistry_;\n    }\n\n    /// @notice Sets the permission for all IPAccounts\n    function setGlobalPermission(address signer_, address to_, bytes4 func_, uint8 permission_) external {\n        // TODO: access controller can only be called by protocol admin\n        if (signer_ == address(0)) {\n            revert Errors.AccessController__SignerIsZeroAddress();\n        }\n        // permission must be one of ABSTAIN, ALLOW, DENY\n        if (permission_ > 2) {\n            revert Errors.AccessController__PermissionIsNotValid();\n        }\n        permissions[address(0)][signer_][to_][func_] = permission_;\n    }\n\n    /// @notice Sets the permission for a specific function call\n    /// @dev By default, all policies are set to ABSTAIN, which means that the permission is not set\n    /// Owner of ipAccount by default has permission sets the permission\n    /// permission 0 => ABSTAIN, 1 => ALLOW, 3 => DENY\n    /// address(0) => wildcard\n    /// bytes4(0) => wildcard\n    /// specific permission overrides wildcard permission\n    /// @param ipAccount_ The account that owns the IP (not support wildcard permission)\n    /// @param signer_ The account that signs the transaction (not support wildcard permission)\n    /// @param to_ The recipient of the transaction (support wildcard permission)\n    /// @param func_ The function selector (support wildcard permission)\n    /// @param permission_ The permission level (0 => ABSTAIN, 1 => ALLOW, 3 => DENY)\n    function setPermission(address ipAccount_, address signer_, address to_, bytes4 func_, uint8 permission_) external {\n        // IPAccount and signer does not support wildcard permission\n        if (ipAccount_ == address(0)) {\n            revert Errors.AccessController__IPAccountIsZeroAddress();\n        }\n        if (signer_ == address(0)) {\n            revert Errors.AccessController__SignerIsZeroAddress();\n        }\n        if (!IIPAccountRegistry(IP_ACCOUNT_REGISTRY).isIpAccount(ipAccount_)) {\n            revert Errors.AccessController__IPAccountIsNotValid();\n        }\n        if (ipAccount_ != msg.sender) {\n            revert Errors.AccessController__CallerIsNotIPAccount();\n        }\n        // permission must be one of ABSTAIN, ALLOW, DENY\n        if (permission_ > 2) {\n            revert Errors.AccessController__PermissionIsNotValid();\n        }\n        permissions[ipAccount_][signer_][to_][func_] = permission_;\n\n        // TODO: emit event\n    }\n\n    /// @notice Returns the permission level for a specific function call.\n    /// @param ipAccount_ The account that owns the IP.\n    /// @param signer_ The account that signs the transaction.\n    /// @param to_ The recipient of the transaction.\n    /// @param func_ The function selector.\n    /// @return The permission level for the specific function call.\n    function getPermission(\n        address ipAccount_,\n        address signer_,\n        address to_,\n        bytes4 func_\n    ) external view returns (uint8) {\n        return permissions[ipAccount_][signer_][to_][func_];\n    }\n\n    /// @notice Checks if a specific function call is allowed.\n    /// @dev This function checks the permission level for a specific function call.\n    /// If a specific permission is set, it overrides the general (wildcard) permission.\n    /// If the current level permission is ABSTAIN, the final permission is determined by the upper level.\n    /// @param ipAccount_ The account that owns the IP.\n    /// @param signer_ The account that signs the transaction.\n    /// @param to_ The recipient of the transaction.\n    /// @param func_ The function selector.\n    /// @return True if the function call is allowed, false otherwise.\n    function checkPermission(\n        address ipAccount_,\n        address signer_,\n        address to_,\n        bytes4 func_\n    ) external view returns (bool) {\n        // ipAccount_ can only call registered modules or set Permissions\n        if (to_ != address(this) && !IModuleRegistry(MODULE_REGISTRY).isRegistered(to_)) {\n            return false;\n        }\n        // Must be a valid IPAccount\n        if (!IIPAccountRegistry(IP_ACCOUNT_REGISTRY).isIpAccount(ipAccount_)) {\n            return false;\n        }\n        // Owner can call all functions of all modules\n        if (IIPAccount(payable(ipAccount_)).owner() == signer_) {\n            return true;\n        }\n\n        // Specific function permission overrides wildcard/general permission\n        if (permissions[ipAccount_][signer_][to_][func_] == AccessPermission.ALLOW) {\n            return true;\n        }\n\n        // If specific function permission is ABSTAIN, check module level permission\n        if (permissions[ipAccount_][signer_][to_][func_] == AccessPermission.ABSTAIN) {\n            // Return true if allow to call all functions of the module\n            if (permissions[ipAccount_][signer_][to_][bytes4(0)] == AccessPermission.ALLOW) {\n                return true;\n            }\n            // If module level permission is ABSTAIN, check transaction signer level permission\n            if (permissions[ipAccount_][signer_][to_][bytes4(0)] == AccessPermission.ABSTAIN) {\n                if (permissions[address(0)][signer_][to_][func_] == AccessPermission.ALLOW) {\n                    return true;\n                }\n                // Return true if the ipAccount allow the signer can call all functions of all modules\n                // Otherwise, return false\n                return permissions[ipAccount_][signer_][address(0)][bytes4(0)] == AccessPermission.ALLOW;\n            }\n            return false;\n        }\n        return false;\n\n        // TODO: emit event\n    }\n}\n"
    },
    "contracts/interfaces/IAccessController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.23;\n\ninterface IAccessController {\n    /// @notice Sets the permission for a specific function call\n    /// @dev Each policy is represented as a mapping from an IP account address to a signer address to a recipient\n    ///// address to a function selector to a permission level.\n    ///// The permission level can be 0 (ABSTAIN), 1 (ALLOW), or 2 (DENY).\n    /// @param ipAccount_ The account that owns the IP\n    /// @param signer_ The account that signs the transaction\n    /// @param to_ The recipient(modules) of the transaction\n    /// @param func_ The function selector\n    /// @param permission_ The permission level\n    function setPermission(address ipAccount_, address signer_, address to_, bytes4 func_, uint8 permission_) external;\n\n    /// @notice Sets the permission for all IPAccounts\n    /// @dev Only the protocol admin can set the global permission\n    /// @param signer_ The account that signs the transaction\n    /// @param to_ The recipient(modules) of the transaction\n    /// @param func_ The function selector\n    /// @param permission_ The permission level\n    function setGlobalPermission(address signer_, address to_, bytes4 func_, uint8 permission_) external;\n\n    /// @notice Gets the permission for a specific function call\n    /// @param ipAccount_ The account that owns the IP\n    /// @param signer_ The account that signs the transaction\n    /// @param to_ The recipient (modules) of the transaction\n    /// @param func_ The function selector\n    /// @return The current permission level for the function call\n    function getPermission(\n        address ipAccount_,\n        address signer_,\n        address to_,\n        bytes4 func_\n    ) external view returns (uint8);\n\n    /// @notice Checks the permission for a specific function call\n    /// @dev This function checks the permission level for a specific function call.\n    /// If a specific permission is set, it overrides the general (wildcard) permission.\n    /// If the current level permission is ABSTAIN, the final permission is determined by the upper level.\n    /// @param ipAccount_ The account that owns the IP\n    /// @param signer_ The account that signs the transaction\n    /// @param to_ The recipient of the transaction\n    /// @param func_ The function selector\n    /// @return A boolean indicating whether the function call is allowed\n    function checkPermission(\n        address ipAccount_,\n        address signer_,\n        address to_,\n        bytes4 func_\n    ) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IIPAccount.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.23;\n\nimport { IERC721Receiver } from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport { IERC1155Receiver } from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport { IERC6551Account } from \"lib/reference/src/interfaces/IERC6551Account.sol\";\n\n/// @title IIPAccount\n/// @dev IPAccount is a token-bound account that adopts the EIP-6551 standard.\n/// These accounts are deployed at deterministic addresses through the official 6551 account registry.\n/// As a deployed smart contract, IPAccount can store IP-related information,\n/// like ownership of other NFTs such as license NFT or Royalty NFT.\n/// IPAccount can interact with modules by making calls as a normal transaction sender.\n/// This allows for seamless operations on the state and data of IP.\n/// IPAccount is core identity for all actions.\ninterface IIPAccount is IERC6551Account, IERC721Receiver, IERC1155Receiver {\n    /// @notice Executes a transaction from the IP Account.\n    /// @param to_ The recipient of the transaction.\n    /// @param value_ The amount of Ether to send.\n    /// @param data_ The data to send along with the transaction.\n    /// @return The return data from the transaction.\n    function execute(address to_, uint256 value_, bytes calldata data_) external payable returns (bytes memory);\n\n    /// @notice Returns the owner of the IP Account.\n    /// @return The address of the owner.\n    function owner() external view returns (address);\n}\n"
    },
    "contracts/interfaces/licensing/IParamVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\ninterface IParamVerifier {\n    function verifyMintingParam(address caller, uint256 mintAmount, bytes memory data) external returns (bool);\n\n    function verifyLinkParentParam(address caller, bytes memory data) external returns (bool);\n\n    function verifyActivationParam(address caller, bytes memory data) external returns (bool);\n\n    function json() external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/modules/base/IModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.23;\n\ninterface IModule {\n    function name() external returns (string memory);\n}\n"
    },
    "contracts/interfaces/registries/IIPAccountRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.23;\n\n/// @title Interface for IP Account Registry\n/// @notice This interface manages the registration and tracking of IP Accounts\ninterface IIPAccountRegistry {\n    /// @notice Event emitted when a new IP Account is created\n    /// @param account The address of the new IP Account\n    /// @param implementation The address of the IP Account implementation\n    /// @param chainId The chain ID where the token contract deployed\n    /// @param tokenContract The address of the token contract associated with the IP Account\n    /// @param tokenId The ID of the token associated with the IP Account\n    event IPAccountRegistered(\n        address indexed account,\n        address indexed implementation,\n        uint256 indexed chainId,\n        address tokenContract,\n        uint256 tokenId\n    );\n\n    /// @notice Deploys an IPAccount contract with the IPAccount implementation and returns the address of the new IP\n    /// @dev The IPAccount deployment deltegates to public ERC6551 Registry\n    /// @param chainId_ The chain ID where  the token contract deployed\n    /// @param tokenContract_ The address of the token contract to be associated with the IP Account\n    /// @param tokenId_ The ID of the token to be associated with the IP Account\n    /// @return The address of the newly created IP Account    \n    function registerIpAccount(\n        uint256 chainId_,\n        address tokenContract_,\n        uint256 tokenId_\n    ) external returns (address);\n\n    /// @notice Returns the IPAccount address for the given NFT token\n    /// @param chainId_ The chain ID where  the token contract deployed\n    /// @param tokenContract_ The address of the token contract associated with the IP Account\n    /// @param tokenId_ The ID of the token associated with the IP Account\n    /// @return The address of the IP Account associated with the given NFT token\n    function ipAccount(\n        uint256 chainId_,\n        address tokenContract_,\n        uint256 tokenId_\n    ) external view returns (address);\n\n\n    /// @notice Returns the IPAccount implementation address\n    /// @return The address of the IPAccount implementation\n    function getIPAccountImpl() external view returns (address);\n}\n"
    },
    "contracts/interfaces/registries/IIPRecordRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\n/// @title IP Record Registry Interface\ninterface IIPRecordRegistry {\n\n    /// @notice Emits when an IP is officially registered into the protocol.\n    /// @param ipId The canonical identifier for the IP.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    /// @param resolver The address of the resolver linked to the IP.\n    event IPRegistered(\n        address ipId,\n        uint256 indexed chainId,\n        address indexed tokenContract,\n        uint256 indexed tokenId,\n        address resolver\n    );\n\n    /// @notice Emits when an IP account is created for an IP.\n    /// @param ipId The canonical identifier for the IP.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    event IPAccountSet(\n        address ipId,\n        uint256 indexed chainId,\n        address indexed tokenContract,\n        uint256 indexed tokenId\n    );\n\n    /// @notice Emits when an IP resolver is bound to an IP.\n    /// @param ipId The canonical identifier of the specified IP.\n    /// @param resolver The address of the new resolver bound to the IP.\n    event IPResolverSet(\n        address ipId,\n        address resolver\n    );\n\n    /// @notice Gets the canonical IP identifier associated with an IP (NFT).\n    /// @dev This is the same as the address of the IP account bound to the IP.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    /// @return The address of the associated IP account.\n    function ipId(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external view returns (address);\n\n    /// @notice Checks whether an IP was registered based on its ID.\n    /// @param id The canonical identifier for the IP.\n    /// @return Whether the IP was registered into the protocol.\n    function isRegistered(\n        address id\n    ) external view returns (bool);\n\n    /// @notice Retrieves whether or not an IP was registered.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    /// @return Whether the IP was registered into the protocol.\n    function isRegistered(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external view returns (bool);\n\n    /// @notice Gets the resolver bound to an IP based on its ID.\n    /// @param id The canonical identifier for the IP.\n    /// @return The IP resolver address if registered, else the zero address.\n    function resolver(\n        address id\n    ) external view returns (address);\n\n    /// @notice Gets the resolver bound to an IP based on its NFT attributes.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    /// @return The IP resolver address if registered, else the zero address.\n    function resolver(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external view returns (address);\n\n    /// @notice Registers an NFT as IP, creating a corresponding IP record.\n    /// @dev This is only callable by an authorized registration module.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    /// @param createAccount Whether to create an IP account in the process.\n    function register(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        address resolverAddr,\n        bool createAccount\n    ) external;\n\n    /// @notice Creates the IP account for the specified IP.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    function createIPAccount(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external returns (address);\n\n    /// @notice Sets the resolver for an IP based on its canonical ID.\n    /// @param id The canonical ID of the IP.\n    /// @param resolverAddr The address of the resolver being set.\n    function setResolver(address id, address resolverAddr) external;\n\n    /// @notice Sets the resolver for an IP based on its NFT attributes.\n    /// @dev This is only callable by an authorized registration module.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    function setResolver(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        address resolver\n    ) external;\n\n}\n"
    },
    "contracts/interfaces/registries/IModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.23;\n\n/// @title IModuleRegistry\n/// @dev This interface defines the methods for a module registry in the Story Protocol.\ninterface IModuleRegistry {\n    /// @notice Emitted when a new module is added to the registry.\n    /// @param name The name of the module.\n    /// @param module The address of the module.\n    event ModuleAdded(string indexed name, address indexed module);\n\n    /// @notice Emitted when a module is removed from the registry.\n    /// @param name The name of the module.\n    /// @param module The address of the module.\n    event ModuleRemoved(string indexed name, address indexed module);\n\n    /// @notice Registers a new module in the registry.\n    /// @dev This function can only be called by the owner of the registry.\n    /// @param name The name of the module.\n    /// @param moduleAddress The address of the module.\n    function registerModule(string memory name, address moduleAddress) external;\n\n    /// @notice Removes a module from the registry.\n    /// @dev This function can only be called by the owner of the registry.\n    /// @param name The name of the module.\n    function removeModule(string memory name) external;\n\n    /// @notice Returns the address of a module by its name.\n    /// @param name The name of the module.\n    /// @return The address of the module.\n    function getModule(string memory name) external view returns (address);\n\n    /// @notice Checks if a module is registered in the registry.\n    /// @param moduleAddress The address of the module.\n    /// @return A boolean indicating whether the module is registered.\n    function isRegistered(address moduleAddress) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/resolvers/IIPMetadataResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { IResolver } from \"contracts/interfaces/resolvers/IResolver.sol\";\nimport { IP } from \"contracts/lib/IP.sol\";\n\n/// @notice Resolver Interface\ninterface IIPMetadataResolver is IResolver {\n\n    /// @notice Fetches core metadata attributed to a specific IP.\n    function metadata(address ipId) external view returns (IP.Metadata memory);\n\n    /// @notice Fetches the canonical name associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function name(address ipId) external view returns (string memory);\n\n    /// @notice Fetches the description associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @return The string descriptor of the IP.\n    function description(address ipId) external view returns (string memory);\n\n    /// @notice Fetches the keccak-256 hash associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @return The bytes32 content hash of the IP.\n    function hash(address ipId) external view returns (bytes32);\n\n    /// @notice Fetches the date of registration of the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function registrationDate(address ipId) external view returns (uint64);\n\n    /// @notice Fetches the initial registrant of the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function registrant(address ipId) external view returns (address);\n\n    /// @notice Fetches the current owner of the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function owner(address ipId) external view returns (address);\n\n    /// @notice Fetches an IP owner defined URI associated with the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function uri(address ipId) external view returns (string memory);\n\n    /// @notice Sets the core metadata associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param data Metadata to be stored for the IP in the metadata resolver.\n    function setMetadata(address ipId, IP.MetadataRecord calldata data) external;\n\n    /// @notice Sets the name associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param name The string name to associate with the IP.\n    function setName(address ipId, string calldata name) external;\n\n    /// @notice Sets the description associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param description The string description to associate with the IP.\n    function setDescription(address ipId, string calldata description) external;\n\n    /// @notice Sets the keccak-256 hash associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param hash The keccak-256 hash to associate with the IP.\n    function setHash(address ipId, bytes32 hash) external;\n\n    /// @notice Sets an IP owner defined URI to associate with the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function setURI(address ipId, string calldata uri) external;\n\n}\n"
    },
    "contracts/interfaces/resolvers/IResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\n/// @notice Resolver Interface\ninterface IResolver {\n\n    /// @notice Gets the address of the access controller for the resolver.\n    function accessController() view external returns (address);\n\n    /// @notice Checks whether the resolver IP interface is supported.\n    function supportsInterface(bytes4 id) view external returns (bool);\n\n}\n"
    },
    "contracts/IPAccountImpl.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.23;\n\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { IERC721Receiver } from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport { IERC1155Receiver } from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport { IAccessController } from \"contracts/interfaces/IAccessController.sol\";\nimport { IERC6551Account } from \"lib/reference/src/interfaces/IERC6551Account.sol\";\nimport { IIPAccount } from \"contracts/interfaces/IIPAccount.sol\";\n\n/// @title IPAccountImpl\n/// @notice The Story Protocol's implementation of the IPAccount.\ncontract IPAccountImpl is IERC165, IIPAccount {\n    address public accessController;\n\n    uint256 public state;\n\n    receive() external payable override(IERC6551Account) {}\n\n    /// @notice Checks if the contract supports a specific interface\n    /// @param interfaceId_ The interface identifier, as specified in ERC-165\n    /// @return True if the contract supports the interface, false otherwise\n    function supportsInterface(bytes4 interfaceId_) external pure returns (bool) {\n        return (interfaceId_ == type(IIPAccount).interfaceId ||\n            interfaceId_ == type(IERC6551Account).interfaceId ||\n            interfaceId_ == type(IERC1155Receiver).interfaceId ||\n            interfaceId_ == type(IERC721Receiver).interfaceId ||\n            interfaceId_ == type(IERC165).interfaceId);\n    }\n\n    /// @notice Initializes the IPAccount with the given access controller\n    /// @param accessController_ The address of the access controller\n    // TODO: can only be called by IPAccountRegistry\n    function initialize(address accessController_) external {\n        require(accessController_ != address(0), \"Invalid access controller\");\n        accessController = accessController_;\n    }\n\n    /// @notice Returns the identifier of the non-fungible token which owns the account\n    /// @return chainId The EIP-155 ID of the chain the token exists on\n    /// @return tokenContract The contract address of the token\n    /// @return tokenId The ID of the token\n    function token() public view override returns (uint256, address, uint256) {\n        bytes memory footer = new bytes(0x60);\n        // 0x4d = 77 bytes (ERC-1167 Header, address, ERC-1167 Footer, salt)\n        // 0x60 = 96 bytes (chainId, tokenContract, tokenId)\n        //    ERC-1167 Header               (10 bytes)\n        //    <implementation (address)>    (20 bytes)\n        //    ERC-1167 Footer               (15 bytes)\n        //    <salt (uint256)>              (32 bytes)\n        //    <chainId (uint256)>           (32 bytes)\n        //    <tokenContract (address)>     (32 bytes)\n        //    <tokenId (uint256)>           (32 bytes)\n        assembly {\n            extcodecopy(address(), add(footer, 0x20), 0x4d, 0x60)\n        }\n\n        return abi.decode(footer, (uint256, address, uint256));\n    }\n\n    /// @notice Checks if the signer is valid for the given data\n    /// @param signer_ The signer to check\n    /// @param data_ The data to check against\n    /// @return The function selector if the signer is valid, 0 otherwise\n    function isValidSigner(address signer_, bytes calldata data_) external view returns (bytes4) {\n        if (_isValidSigner(signer_, address(0), data_)) {\n            return IERC6551Account.isValidSigner.selector;\n        }\n\n        return bytes4(0);\n    }\n\n    /// @notice Returns the owner of the IP Account.\n    /// @return The address of the owner.\n    function owner() public view returns (address) {\n        (uint256 chainId, address contractAddress, uint256 tokenId) = token();\n        if (chainId != block.chainid) return address(0);\n        return IERC721(contractAddress).ownerOf(tokenId);\n    }\n\n    /// @notice Checks if the signer is valid for the given data and recipient\n    /// @dev It leverages the access controller to check the permission\n    /// @param signer_ The signer to check\n    /// @param to_ The recipient of the transaction\n    /// @param data_ The calldata to check against\n    /// @return True if the signer is valid, false otherwise\n    function _isValidSigner(address signer_, address to_, bytes calldata data_) internal view returns (bool) {\n        require(data_.length == 0 || data_.length >= 4, \"Invalid calldata\");\n        bytes4 selector = bytes4(0);\n        if (data_.length >= 4) {\n            selector = bytes4(data_[:4]);\n        }\n        return IAccessController(accessController).checkPermission(address(this), signer_, to_, selector);\n    }\n\n    /// @notice Executes a transaction from the IP Account.\n    /// @param to_ The recipient of the transaction.\n    /// @param value_ The amount of Ether to send.\n    /// @param data_ The data to send along with the transaction.\n    /// @return result The return data from the transaction.\n    function execute(address to_, uint256 value_, bytes calldata data_) external payable returns (bytes memory result) {\n        require(_isValidSigner(msg.sender, to_, data_), \"Invalid signer\");\n\n        ++state;\n\n        bool success;\n        (success, result) = to_.call{ value: value_ }(data_);\n\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    function onERC721Received(address, address, uint256, bytes memory) public pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public pure returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/lib/AccessPermission.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\n/// @title Access Permission Library\n/// @notice Library for IPAccount access control permissions.\n///         These permissions are used by the AccessController.\nlibrary AccessPermission {\n    // ABSTAIN means having not enough information to make decision at current level,\n    // deferred decision to up level permission.\n    uint8 public constant ABSTAIN = 0;\n\n    // ALLOW means the permission is granted to transaction signer to call the function.\n    uint8 public constant ALLOW = 1;\n\n    // DENY means the permission is denied to transaction signer to call the function.\n    uint8 public constant DENY = 2;\n}\n"
    },
    "contracts/lib/Errors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.19;\n\n/// @title Errors Library\n/// @notice Library for all Story Protocol contract errors.\nlibrary Errors {\n    ////////////////////////////////////////////////////////////////////////////\n    //                               IPRecordRegistry                         //\n    ////////////////////////////////////////////////////////////////////////////\n\n    /// @notice The IP record has already been registered.\n    error IPRecordRegistry_AlreadyRegistered();\n\n    /// @notice The IP account has already been created.\n    error IPRecordRegistry_IPAccountAlreadyCreated();\n\n    /// @notice The IP record has not yet been registered.\n    error IPRecordRegistry_NotYetRegistered();\n\n    /// @notice The specified IP resolver is not valid.\n    error IPRecordRegistry_ResolverInvalid();\n\n    /// @notice Caller not authorized to perform the IP registry function call.\n    error IPRecordRegistry_Unauthorized();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                                 IPResolver                            ///\n    ////////////////////////////////////////////////////////////////////////////\n\n    /// @notice The targeted IP does not yet have an IP account.\n    error IPResolver_InvalidIP();\n\n    /// @notice Caller not authorized to perform the IP resolver function call.\n    error IPResolver_Unauthorized();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                            LicenseRegistry                             //\n    ////////////////////////////////////////////////////////////////////////////\n\n    /// @notice Error thrown when a policy is already set for an IP ID.\n    error LicenseRegistry__PolicyAlreadySetForIpId();\n    error LicenseRegistry__FrameworkNotFound();\n    error LicenseRegistry__EmptyLicenseUrl();\n    error LicenseRegistry__ParamVerifierLengthMismatch();\n    error LicenseRegistry__InvalidParamVerifierType();\n    error LicenseRegistry__PolicyNotFound();\n    error LicenseRegistry__NotLicensee();\n    error LicenseRegistry__ParentIdEqualThanChild();\n    error LicenseRegistry__LicensorDoesntHaveThisPolicy();\n    error LicenseRegistry__MintParamFailed();\n    error LicenseRegistry__LinkParentParamFailed();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                            Dispute Module                              //\n    ////////////////////////////////////////////////////////////////////////////\n\n    error DisputeModule__ZeroArbitrationPolicy();\n    error DisputeModule__ZeroArbitrationRelayer();\n    error DisputeModule__ZeroDisputeTag();\n    error DisputeModule__ZeroLinkToDisputeSummary();\n    error DisputeModule__NotWhitelistedArbitrationPolicy();\n    error DisputeModule__NotWhitelistedDisputeTag();\n    error DisputeModule__NotWhitelistedArbitrationRelayer();\n    error DisputeModule__NotDisputeInitiator();\n\n    error ArbitrationPolicySP__ZeroDisputeModule();\n    error ArbitrationPolicySP__ZeroPaymentToken();\n    error ArbitrationPolicySP__NotDisputeModule();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                            Royalty Module                              //\n    ////////////////////////////////////////////////////////////////////////////\n\n    error RoyaltyModule__ZeroRoyaltyPolicy();\n    error RoyaltyModule__NotWhitelistedRoyaltyPolicy();\n    error RoyaltyModule__AlreadySetRoyaltyPolicy();\n\n    error RoyaltyPolicyLS__ZeroRoyaltyModule();\n    error RoyaltyPolicyLS__ZeroLiquidSplitFactory();\n    error RoyaltyPolicyLS__ZeroLiquidSplitMain();\n    error RoyaltyPolicyLS__NotRoyaltyModule();\n    error RoyaltyPolicyLS__TransferFailed();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                             ModuleRegistry                             //\n    ////////////////////////////////////////////////////////////////////////////\n\n    error ModuleRegistry__ModuleAddressZeroAddress();\n    error ModuleRegistry__ModuleAddressNotContract();\n    error ModuleRegistry__ModuleAlreadyRegistered();\n    error ModuleRegistry__NameEmptyString();\n    error ModuleRegistry__NameAlreadyRegistered();\n    error ModuleRegistry__NameDoesNotMatch();\n    error ModuleRegistry__ModuleNotRegistered();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                             AccessController                           //\n    ////////////////////////////////////////////////////////////////////////////\n\n    error AccessController__IPAccountIsZeroAddress();\n    error AccessController__IPAccountIsNotValid();\n    error AccessController__SignerIsZeroAddress();\n    error AccessController__CallerIsNotIPAccount();\n    error AccessController__PermissionIsNotValid();\n\n    ////////////////////////////////////////////////////////////////////////////\n    //                             TaggingModule                              //\n    ////////////////////////////////////////////////////////////////////////////\n\n    error TaggingModule__InvalidRelationTypeName();\n    error TaggingModule__RelationTypeAlreadyExists();\n    error TaggingModule__SrcIpIdDoesNotHaveSrcTag();\n    error TaggingModule__DstIpIdDoesNotHaveDstTag();\n    error TaggingModule__RelationTypeDoesNotExist();\n\n}\n"
    },
    "contracts/lib/IP.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\n/// @title IP Library\n/// @notice Library for constants, structs, and helper functions used for IP.\nlibrary IP {\n    /// @notice Core metadata associated with an IP.\n    /// @dev This is what is fetched when `metadata()` is called from an IP\n    ///      resolver, and includes aggregated attributes fetched from various\n    ///      modules in addition to that which is stored on the resolver itself.\n    struct Metadata {\n        // The current owner of the IP.\n        address owner;\n        // The name associated with the IP.\n        string name;\n        // A description associated with the IP.\n        string description;\n        // A keccak-256 hash of the IP content.\n        bytes32 hash;\n        // The date which the IP was registered.\n        uint64 registrationDate;\n        // The address of the initial IP registrant.\n        address registrant;\n        // The token URI associated with the IP.\n        string uri;\n    }\n\n    /// @notice Core metadata exclusively saved by the IP resolver.\n    /// @dev This only encompasses metadata which is stored on the IP metadata\n    ///      resolver itself, and does not include those attributes which may\n    ///      be fetched from different modules (e.g. the licensing modules).\n    struct MetadataRecord {\n        // The name associated with the IP.\n        string name;\n        // A description associated with the IP.\n        string description;\n        // A keccak-256 hash of the IP content.\n        bytes32 hash;\n        // The date which the IP was registered.\n        uint64 registrationDate;\n        // The address of the initial IP registrant.\n        address registrant;\n        // The token URI associated with the IP.\n        string uri;\n    }\n}\n"
    },
    "contracts/lib/Licensing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\nimport { IParamVerifier } from \"../interfaces/licensing/IParamVerifier.sol\";\n\nlibrary Licensing {\n\n    /// Identifies a license parameter (term) from a license framework\n    struct Parameter {\n        /// Contract that must check if the condition of the paremeter is set\n        IParamVerifier verifier;\n        /// Default value for the parameter, as defined in the license framework text\n        bytes defaultValue;\n    }\n\n    /// Moment of the license lifetime where a Parameter will be verified\n    enum ParamVerifierType {\n        Minting,\n        Activate,\n        LinkParent\n    }\n\n    /// Describes a licensing framework, which is a set of licensing terms (parameters)\n    /// that come into effect in different moments of the licensing life cycle.\n    /// Must correspond to human (or at least lawyer) readable text describing them in licenseUrl.\n    /// To be valid in Story Protocol, the parameters described in the text must express default values\n    /// corresponding to those of each Parameter struct\n    struct Framework {\n        /// These parameters need to be verified when minting a license\n        Parameter[] mintingParams;\n        /// License may need to be activated before linking, these parameters must be verified to activate.\n        Parameter[] activationParams;\n        /// The framework might have activation terms defined, but the default settings say they are disabled\n        /// (so defaultNeedsActivation should be true). If the policy doesn't change this, it means licenses\n        /// will be minted Active and can't be linked out of the box (if linkParentParams are true)\n        bool defaultNeedsActivation;\n        /// These parameters need to be verified so the owner of a license can link to a parent ipId/policy\n        Parameter[] linkParentParams;\n        /// URL to the file containing the legal text for the license agreement\n        string licenseUrl;\n    }\n\n    // Needed because Solidity doesn't support passing nested struct arrays to storage\n    struct FrameworkCreationParams {\n        IParamVerifier[] mintingParamVerifiers;\n        bytes[] mintingParamDefaultValues;\n        IParamVerifier[] activationParamVerifiers;\n        bytes[] activationParamDefaultValues;\n        bool defaultNeedsActivation;\n        IParamVerifier[] linkParentParamVerifiers;\n        bytes[] linkParentParamDefaultValues;\n        string licenseUrl;\n    }\n    \n    /// A particular configuration of a Licensing Framework, setting (or not) values for the licensing\n    /// terms (parameters) of the framework.\n    /// The lengths of the param value arrays must correspond to the Parameter[] of the framework.\n    struct Policy {\n        /// Id of a Licensing Framework\n        uint256 frameworkId;\n        /// Array with values for parameters verifying conditions to mint a license. Empty bytes for index if\n        /// this policy wants to use the default value for the paremeter.\n        bytes[] mintingParamValues;\n        /// Array with values for parameters verifying conditions to activate a license. Empty bytes for index if\n        /// this policy wants to use the default value for the paremeter.\n        bytes[] activationParamValues;\n        /// If false, minted licenses will start activated and verification of activationParams will be skipped\n        bool needsActivation;\n        /// Array with values for parameters verifying conditions to link a license to a parent. Empty bytes for index if\n        /// this policy wants to use the default value for the paremeter.\n        bytes[] linkParentParamValues;\n    }\n\n    /// Data that define a License Agreement NFT\n    struct License {\n        /// the id for the Policy this License will set to the desired derivative IP after being burned.\n        uint256 policyId;\n        /// Ids for the licensors, meaning the Ip Ids of the parents of the derivative to be created\n        address[] licensorIpIds;\n    }\n}\n"
    },
    "contracts/lib/modules/Module.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\n// String values for core protocol modules.\nstring constant REGISTRATION_MODULE_KEY = \"REGISTRATION_MODULE\";\n"
    },
    "contracts/lib/registries/IPAccountChecker.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { IIPAccountRegistry } from \"contracts/interfaces/registries/IIPAccountRegistry.sol\";\nimport { ERC165Checker } from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport { IERC6551Account } from \"lib/reference/src/interfaces/IERC6551Account.sol\";\nimport { IIPAccount } from \"contracts/interfaces/IIPAccount.sol\";\n\n/// @title IPAccountChecker\n/// @dev This library provides utility functions to check the registration and validity of IP Accounts.\n/// It uses the ERC165 standard for contract introspection and the IIPAccountRegistry interface\n/// for account registration checks.\nlibrary IPAccountChecker {\n    /// @notice Returns true if the IPAccount is registered.\n    /// @param chainId_ The chain ID where the IP Account is located.\n    /// @param tokenContract_ The address of the token contract associated with the IP Account.\n    /// @param tokenId_ The ID of the token associated with the IP Account.\n    /// @return True if the IP Account is registered, false otherwise.\n    function isRegistered(\n        IIPAccountRegistry ipAccountRegistry_,\n        uint256 chainId_,\n        address tokenContract_,\n        uint256 tokenId_\n    ) external view returns (bool) {\n        return ipAccountRegistry_.ipAccount(chainId_, tokenContract_, tokenId_).code.length != 0;\n    }\n\n    /// @notice Checks if the given address is a valid IP Account.\n    /// @param ipAccountRegistry_ The IP Account registry contract.\n    /// @param ipAccountAddress_ The address to check.\n    /// @return True if the address is a valid IP Account, false otherwise.\n    function isIpAccount(\n        IIPAccountRegistry ipAccountRegistry_,\n        address ipAccountAddress_\n    ) external view returns (bool) {\n        if (ipAccountAddress_ == address(0)) return false;\n        if (ipAccountAddress_.code.length == 0) return false;\n        if (!ERC165Checker.supportsERC165(ipAccountAddress_)) return false;\n        if (!ERC165Checker.supportsInterface(ipAccountAddress_, type(IERC6551Account).interfaceId)) return false;\n        if (!ERC165Checker.supportsInterface(ipAccountAddress_, type(IIPAccount).interfaceId)) return false;\n        (uint chainId, address tokenContract, uint tokenId) = IIPAccount(payable(ipAccountAddress_)).token();\n        return ipAccountAddress_ == ipAccountRegistry_.ipAccount(chainId, tokenContract, tokenId);\n    }\n}\n"
    },
    "contracts/modules/dispute-module/DisputeModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport {ShortStringOps} from \"../../utils/ShortStringOps.sol\";\nimport {IArbitrationPolicy} from \"../../../interfaces/modules/dispute-module/policies/IArbitrationPolicy.sol\";\nimport {IDisputeModule} from \"../../../interfaces/modules/dispute-module/IDisputeModule.sol\";\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport {Errors} from \"../../lib/Errors.sol\";\n\n/// @title Story Protocol Dispute Module\n/// @notice The Story Protocol dispute module acts as an enforcement layer for\n///         that allows to raise disputes and resolve them through arbitration.\ncontract DisputeModule is IDisputeModule, ReentrancyGuard {\n    /// @notice Dispute struct\n    struct Dispute {\n        address ipId; // The ipId\n        address disputeInitiator; // The address of the dispute initiator\n        address arbitrationPolicy; // The address of the arbitration policy\n        bytes32 linkToDisputeSummary; // The link of the dispute summary\n        bytes32 tag; // The target tag of the dispute // TODO: move to tagging module?\n    }\n\n    /// @notice Dispute id\n    uint256 public disputeId;\n\n    /// @notice Contains the dispute struct info for a given dispute id\n    mapping(uint256 disputeId => Dispute dispute) public disputes;\n\n    /// @notice Indicates if a dispute tag is whitelisted\n    mapping(bytes32 tag => bool allowed) public isWhitelistedDisputeTag;\n\n    /// @notice Indicates if an arbitration policy is whitelisted\n    mapping(address arbitrationPolicy => bool allowed) public isWhitelistedArbitrationPolicy;\n\n    /// @notice Indicates if an arbitration relayer is whitelisted for a given arbitration policy\n    mapping(address arbitrationPolicy => mapping(address arbitrationRelayer => bool allowed)) public\n        isWhitelistedArbitrationRelayer;\n\n    /// @notice Restricts the calls to the governance address\n    modifier onlyGovernance() {\n        // TODO: where is governance address defined?\n        _;\n    }\n\n    /// @notice Whitelists a dispute tag\n    /// @param _tag The dispute tag\n    /// @param _allowed Indicates if the dispute tag is whitelisted or not\n    function whitelistDisputeTags(bytes32 _tag, bool _allowed) external onlyGovernance {\n        if (_tag == bytes32(0)) revert Errors.DisputeModule__ZeroDisputeTag();\n\n        isWhitelistedDisputeTag[_tag] = _allowed;\n\n        // TODO: emit event\n    }\n\n    /// @notice Whitelists an arbitration policy\n    /// @param _arbitrationPolicy The address of the arbitration policy\n    /// @param _allowed Indicates if the arbitration policy is whitelisted or not\n    function whitelistArbitrationPolicy(address _arbitrationPolicy, bool _allowed) external onlyGovernance {\n        if (_arbitrationPolicy == address(0)) revert Errors.DisputeModule__ZeroArbitrationPolicy();\n\n        isWhitelistedArbitrationPolicy[_arbitrationPolicy] = _allowed;\n\n        // TODO: emit event\n    }\n\n    /// @notice Whitelists an arbitration relayer for a given arbitration policy\n    /// @param _arbitrationPolicy The address of the arbitration policy\n    /// @param _arbPolicyRelayer The address of the arbitration relayer\n    /// @param _allowed Indicates if the arbitration relayer is whitelisted or not\n    function whitelistArbitrationRelayer(address _arbitrationPolicy, address _arbPolicyRelayer, bool _allowed)\n        external\n        onlyGovernance\n    {\n        if (_arbitrationPolicy == address(0)) revert Errors.DisputeModule__ZeroArbitrationPolicy();\n        if (_arbPolicyRelayer == address(0)) revert Errors.DisputeModule__ZeroArbitrationRelayer();\n\n        isWhitelistedArbitrationRelayer[_arbitrationPolicy][_arbPolicyRelayer] = _allowed;\n\n        // TODO: emit event\n    }\n\n    /// @notice Raises a dispute\n    /// @param _ipId The ipId\n    /// @param _arbitrationPolicy The address of the arbitration policy\n    /// @param _linkToDisputeSummary The link of the dispute summary\n    /// @param _targetTag The target tag of the dispute\n    /// @param _data The data to initialize the policy\n    /// @return disputeId The dispute id\n    function raiseDispute(\n        address _ipId,\n        address _arbitrationPolicy,\n        string memory _linkToDisputeSummary,\n        bytes32 _targetTag,\n        bytes calldata _data\n    ) external nonReentrant returns (uint256) {\n        // TODO: make call to ensure ipId exists/has been registered\n        if (!isWhitelistedArbitrationPolicy[_arbitrationPolicy]) {\n            revert Errors.DisputeModule__NotWhitelistedArbitrationPolicy();\n        }\n        if (!isWhitelistedDisputeTag[_targetTag]) revert Errors.DisputeModule__NotWhitelistedDisputeTag();\n\n        bytes32 linkToDisputeSummary = ShortStringOps.stringToBytes32(_linkToDisputeSummary);\n        if (linkToDisputeSummary == bytes32(0)) revert Errors.DisputeModule__ZeroLinkToDisputeSummary();\n        \n        disputeId++;\n\n        disputes[disputeId] = Dispute({\n            ipId: _ipId,\n            disputeInitiator: msg.sender,\n            arbitrationPolicy: _arbitrationPolicy,\n            linkToDisputeSummary: linkToDisputeSummary,\n            tag: _targetTag\n        });\n\n        // TODO: set tag to \"in-dispute\" state\n\n        IArbitrationPolicy(_arbitrationPolicy).onRaiseDispute(msg.sender, _data);\n\n        // TODO: emit event\n\n        return disputeId;\n    }\n\n    /// @notice Sets the dispute judgement\n    /// @param _disputeId The dispute id\n    /// @param _decision The decision of the dispute\n    /// @param _data The data to set the dispute judgement\n    function setDisputeJudgement(uint256 _disputeId, bool _decision, bytes calldata _data) external nonReentrant {\n        address _arbitrationPolicy = disputes[_disputeId].arbitrationPolicy;\n\n        // TODO: if dispute tag is not in \"in-dispute\" state then the function should revert - the same disputeId cannot be set twice + cancelled cannot be set\n        if (!isWhitelistedArbitrationRelayer[_arbitrationPolicy][msg.sender]) {\n            revert Errors.DisputeModule__NotWhitelistedArbitrationRelayer();\n        }\n\n        if (_decision) {\n            // TODO: set tag to the target dispute tag state\n        } else {\n            // TODO: remove tag/set dispute tag to null state\n        }\n\n        IArbitrationPolicy(_arbitrationPolicy).onDisputeJudgement(_disputeId, _decision, _data);\n\n        // TODO: emit event\n    }\n\n    /// @notice Cancels an ongoing dispute\n    /// @param _disputeId The dispute id\n    /// @param _data The data to cancel the dispute\n    function cancelDispute(uint256 _disputeId, bytes calldata _data) external nonReentrant {\n        if (msg.sender != disputes[_disputeId].disputeInitiator) revert Errors.DisputeModule__NotDisputeInitiator();\n        // TODO: if tag is not \"in-dispute\" then revert\n\n        IArbitrationPolicy(disputes[_disputeId].arbitrationPolicy).onDisputeCancel(msg.sender, _disputeId, _data);\n\n        // TODO: remove tag/set dispute tag to null state\n\n        // TODO: emit event\n    }\n\n    /// @notice Resolves a dispute after it has been judged\n    /// @param _disputeId The dispute id\n    function resolveDispute(uint256 _disputeId) external {\n        if (msg.sender != disputes[_disputeId].disputeInitiator) revert Errors.DisputeModule__NotDisputeInitiator();\n        // TODO: if tag is in \"in-dispute\" or already \"null\" then revert\n\n        // TODO: remove tag/set dispute tag to null state\n\n        // TODO: emit event\n    }\n}\n"
    },
    "contracts/modules/dispute-module/policies/ArbitrationPolicySP.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport {IArbitrationPolicy} from \"../../../../interfaces/modules/dispute-module/policies/IArbitrationPolicy.sol\";\nimport {IDisputeModule} from \"../../../../interfaces/modules/dispute-module/IDisputeModule.sol\";\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {Errors} from \"../../../lib/Errors.sol\";\n\n/// @title Story Protocol Arbitration Policy\n/// @notice The Story Protocol arbitration policy is a simple policy that\n///         requires the dispute initiator to pay a fixed amount of tokens\n///         to raise a dispute and refunds that amount if the dispute initiator\n///         wins the dispute.\ncontract ArbitrationPolicySP is IArbitrationPolicy {\n    using SafeERC20 for IERC20;\n\n    /// @notice Dispute module address\n    address public immutable DISPUTE_MODULE;\n\n    /// @notice Payment token address\n    address public immutable PAYMENT_TOKEN;\n\n    /// @notice Arbitration price\n    uint256 public immutable ARBITRATION_PRICE;\n\n    /// @notice Restricts the calls to the governance address\n    modifier onlyGovernance() {\n        // TODO: where is governance address defined?\n        _;\n    }\n\n    /// @notice Restricts the calls to the dispute module\n    modifier onlyDisputeModule() {\n        if (msg.sender != DISPUTE_MODULE) revert Errors.ArbitrationPolicySP__NotDisputeModule();\n        _;\n    }\n\n    /// @notice Constructor\n    /// @param _disputeModule Address of the dispute module contract\n    /// @param _paymentToken Address of the payment token\n    /// @param _arbitrationPrice Arbitration price\n    constructor(address _disputeModule, address _paymentToken, uint256 _arbitrationPrice) {\n        if (_disputeModule == address(0)) revert Errors.ArbitrationPolicySP__ZeroDisputeModule();\n        if (_paymentToken == address(0)) revert Errors.ArbitrationPolicySP__ZeroPaymentToken();\n\n        DISPUTE_MODULE = _disputeModule;\n        PAYMENT_TOKEN = _paymentToken;\n        ARBITRATION_PRICE = _arbitrationPrice;\n    }\n\n    /// @notice Executes custom logic on raise dispute\n    /// @param _caller Address of the caller\n    function onRaiseDispute(address _caller, bytes calldata) external onlyDisputeModule {\n        // TODO: we can add permit if the token supports it\n        IERC20(PAYMENT_TOKEN).safeTransferFrom(_caller, address(this), ARBITRATION_PRICE);\n    }\n\n    /// @notice Executes custom logic on dispute judgement\n    /// @param _disputeId The dispute id\n    /// @param _decision The decision of the dispute\n    function onDisputeJudgement(uint256 _disputeId, bool _decision, bytes calldata) external onlyDisputeModule {\n        if (_decision) {\n            (, address disputeInitiator,,,) = IDisputeModule(DISPUTE_MODULE).disputes(_disputeId);\n            IERC20(PAYMENT_TOKEN).safeTransfer(disputeInitiator, ARBITRATION_PRICE);\n        }\n    }\n\n    /// @notice Executes custom logic on dispute cancel\n    function onDisputeCancel(address, uint256, bytes calldata) external onlyDisputeModule {}\n\n    /// @notice Allows governance address to withdraw\n    /// @param _amount The amount to withdraw\n    function withdraw(uint256 _amount) external onlyGovernance {\n        // TODO: where is governance address defined?\n        /* IERC20(PAYMENT_TOKEN).safeTransfer(governance, _amount); */\n    }\n}\n"
    },
    "contracts/modules/royalty-module/policies/RoyaltyPolicyLS.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport {ILiquidSplitFactory} from \"../../../../interfaces/modules/royalty-module/policies/ILiquidSplitFactory.sol\";\nimport {IRoyaltyPolicy} from \"../../../../interfaces/modules/royalty-module/policies/IRoyaltyPolicy.sol\";\nimport {ILiquidSplitClone} from \"../../../../interfaces/modules/royalty-module/policies/ILiquidSplitClone.sol\";\nimport {ILiquidSplitMain} from \"../../../../interfaces/modules/royalty-module/policies/ILiquidSplitMain.sol\";\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {Errors} from \"../../../lib/Errors.sol\";\n\n/// @title Liquid Split Royalty Policy\n/// @notice The LiquidSplit royalty policy splits royalties in accordance with\n///         the percentage of royalty NFTs owned by each account.\ncontract RoyaltyPolicyLS is IRoyaltyPolicy {\n    using SafeERC20 for IERC20;\n\n    /// @notice RoyaltyModule address\n    address public immutable ROYALTY_MODULE;\n\n    /// @notice LiquidSplitFactory address\n    address public immutable LIQUID_SPLIT_FACTORY;\n\n    /// @notice LiquidSplitMain address\n    address public immutable LIQUID_SPLIT_MAIN;\n\n    /// @notice Indicates the address of the LiquidSplitClone contract for a given ipId\n    mapping(address ipId => address splitClone) public splitClones;\n\n    /// @notice Restricts the calls to the royalty module\n    modifier onlyRoyaltyModule() {\n        if (msg.sender != ROYALTY_MODULE) revert Errors.RoyaltyPolicyLS__NotRoyaltyModule();\n        _;\n    }\n\n    /// @notice Constructor\n    /// @param _royaltyModule Address of the RoyaltyModule contract\n    /// @param _liquidSplitFactory Address of the LiquidSplitFactory contract\n    /// @param _liquidSplitMain Address of the LiquidSplitMain contract\n    constructor(address _royaltyModule, address _liquidSplitFactory, address _liquidSplitMain) {\n        if (_royaltyModule == address(0)) revert Errors.RoyaltyPolicyLS__ZeroRoyaltyModule();\n        if (_liquidSplitFactory == address(0)) revert Errors.RoyaltyPolicyLS__ZeroLiquidSplitFactory();\n        if (_liquidSplitMain == address(0)) revert Errors.RoyaltyPolicyLS__ZeroLiquidSplitMain();\n\n        ROYALTY_MODULE = _royaltyModule;\n        LIQUID_SPLIT_FACTORY = _liquidSplitFactory;\n        LIQUID_SPLIT_MAIN = _liquidSplitMain;\n    }\n\n    /// @notice Initializes the royalty policy\n    /// @param _ipId The ipId\n    /// @param _data The data to initialize the policy\n    function initPolicy(address _ipId, bytes calldata _data) external onlyRoyaltyModule {\n        (address[] memory accounts, uint32[] memory initAllocations, uint32 distributorFee, address splitOwner) =\n            abi.decode(_data, (address[], uint32[], uint32, address));\n\n        // TODO: input validation: accounts & initAllocations - can we make up to 1000 parents with tx going through - if not alternative may be to create new contract to claim RNFTs\n        // TODO: input validation: distributorFee\n        // TODO: input validation: splitOwner\n\n        address splitClone = ILiquidSplitFactory(LIQUID_SPLIT_FACTORY).createLiquidSplitClone(\n            accounts, initAllocations, distributorFee, splitOwner\n        );\n\n        splitClones[_ipId] = splitClone;\n    }\n\n    /// @notice Distributes funds to the accounts in the LiquidSplitClone contract\n    /// @param _ipId The ipId\n    /// @param _token The token to distribute\n    /// @param _accounts The accounts to distribute to\n    /// @param _distributorAddress The distributor address\n    function distributeFunds(address _ipId, address _token, address[] calldata _accounts, address _distributorAddress)\n        external\n    {\n        ILiquidSplitClone(splitClones[_ipId]).distributeFunds(_token, _accounts, _distributorAddress);\n    }\n\n    /// @notice Claims the available royalties for a given account\n    /// @param _account The account to claim for\n    /// @param _withdrawETH The amount of ETH to withdraw\n    /// @param _tokens The tokens to withdraw\n    function claimRoyalties(address _account, uint256 _withdrawETH, ERC20[] calldata _tokens) external {\n        ILiquidSplitMain(LIQUID_SPLIT_MAIN).withdraw(_account, _withdrawETH, _tokens);\n    }\n\n    /// @notice Allows to pay a royalty\n    /// @param _caller The caller\n    /// @param _ipId The ipId\n    /// @param _token The token to pay\n    /// @param _amount The amount to pay\n    function onRoyaltyPayment(address _caller, address _ipId, address _token, uint256 _amount)\n        external\n        onlyRoyaltyModule\n    {\n        address destination = splitClones[_ipId];\n        IERC20(_token).safeTransferFrom(_caller, destination, _amount);\n    }\n}\n"
    },
    "contracts/modules/royalty-module/RoyaltyModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport {IRoyaltyModule} from \"../../../interfaces/modules/royalty-module/IRoyaltyModule.sol\";\nimport {IRoyaltyPolicy} from \"../../../interfaces/modules/royalty-module/policies/IRoyaltyPolicy.sol\";\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport {Errors} from \"../../lib/Errors.sol\";\n\n/// @title Story Protocol Royalty Module\n/// @notice The Story Protocol royalty module allows to set royalty policies an ipId\n///         and pay royalties as a derivative ip.\ncontract RoyaltyModule is IRoyaltyModule, ReentrancyGuard {\n    /// @notice Indicates if a royalty policy is whitelisted\n    mapping(address royaltyPolicy => bool allowed) public isWhitelistedRoyaltyPolicy;\n\n    /// @notice Indicates the royalty policy for a given ipId\n    mapping(address ipId => address royaltyPolicy) public royaltyPolicies;\n\n    /// @notice Restricts the calls to the governance address\n    modifier onlyGovernance() {\n        // TODO: where is governance address defined?\n        _;\n    }\n\n    /// @notice Restricts the calls to the license module\n    modifier onlyLicenseModule() {\n        // TODO: where is license module address defined?\n        _;\n    }\n\n    /// @notice Restricts the calls to a IPAccount\n    modifier onlyIPAccount() {\n        // TODO: where to find if an address is a valid IPAccount or an approved operator?\n        _;\n    }\n\n    /// @notice Whitelist a royalty policy\n    /// @param _royaltyPolicy The address of the royalty policy\n    /// @param _allowed Indicates if the royalty policy is whitelisted or not\n    function whitelistRoyaltyPolicy(address _royaltyPolicy, bool _allowed) external onlyGovernance {\n        if (_royaltyPolicy == address(0)) revert Errors.RoyaltyModule__ZeroRoyaltyPolicy();\n\n        isWhitelistedRoyaltyPolicy[_royaltyPolicy] = _allowed;\n\n        // TODO: emit event\n    }\n\n    /// @notice Sets the royalty policy for an ipId\n    /// @param _ipId The ipId\n    /// @param _royaltyPolicy The address of the royalty policy\n    /// @param _data The data to initialize the policy\n    function setRoyaltyPolicy(address _ipId, address _royaltyPolicy, bytes calldata _data)\n        external\n        onlyLicenseModule\n        nonReentrant\n    {\n        // TODO: make call to ensure ipId exists/has been registered\n        if (!isWhitelistedRoyaltyPolicy[_royaltyPolicy]) revert Errors.RoyaltyModule__NotWhitelistedRoyaltyPolicy();\n        if (royaltyPolicies[_ipId] != address(0)) revert Errors.RoyaltyModule__AlreadySetRoyaltyPolicy();\n        // TODO: check if royalty policy is compatible with parents royalty policy\n\n        royaltyPolicies[_ipId] = _royaltyPolicy;\n\n        IRoyaltyPolicy(_royaltyPolicy).initPolicy(_ipId, _data);\n\n        // TODO: emit event\n    }\n\n    /// @notice Allows an IPAccount to pay royalties\n    /// @param _ipId The ipId\n    /// @param _token The token to pay the royalties in\n    /// @param _amount The amount to pay\n    function payRoyalty(address _ipId, address _token, uint256 _amount) external onlyIPAccount nonReentrant {\n        IRoyaltyPolicy(royaltyPolicies[_ipId]).onRoyaltyPayment(msg.sender, _ipId, _token, _amount);\n\n        // TODO: emit event\n    }\n}\n"
    },
    "contracts/modules/tagging/TaggingModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\n\npragma solidity ^0.8.21;\n\nimport { ShortString, ShortStrings } from \"@openzeppelin/contracts/utils/ShortStrings.sol\";\nimport { ShortStringOps } from \"contracts/utils/ShortStringOps.sol\";\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport { Errors } from \"contracts/lib/Errors.sol\";\nimport { IModule } from \"contracts/interfaces/modules/base/IModule.sol\";\n\ncontract TaggingModule is IModule {\n    using ShortStrings for *;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 constant MAX_TAG_PERMISSIONS_AT_ONCE = 300;\n\n    string public name = \"TaggingModule\";\n\n    mapping(address => EnumerableSet.Bytes32Set) private _tagsForIpIds;\n\n    function setTag(string calldata tag, address ipId) external returns (bool added) {\n        // TODO: access control\n        // TODO: emit\n        return _tagsForIpIds[ipId].add(ShortStringOps.stringToBytes32(tag));\n    }\n\n    function removeTag(string calldata tag, address ipId) external returns (bool removed) {\n        // TODO: access control\n        return _tagsForIpIds[ipId].remove(ShortStringOps.stringToBytes32(tag));\n    }\n\n    function isTagged(string calldata tag, address ipId) external view returns (bool) {\n        return _tagsForIpIds[ipId].contains(ShortStringOps.stringToBytes32(tag));\n    }\n\n    function totalTagsForIp(address ipId) external view returns (uint256) {\n        return _tagsForIpIds[ipId].length();\n    }\n\n    function tagAtIndexForIp(address ipId, uint256 index) external view returns (bytes32) {\n        // WARNING: tag ordering not guaranteed (since they can be removed)\n        return _tagsForIpIds[ipId].at(index);\n    }\n\n    function tagStringAtIndexForIp(address ipId, uint256 index) external view returns (string memory) {\n        // WARNING: tag ordering not guaranteed (since they can be removed)\n        return ShortString.wrap(_tagsForIpIds[ipId].at(index)).toString();\n    }\n\n}\n"
    },
    "contracts/registries/IPAccountRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.23;\n\nimport { IIPAccountRegistry } from \"contracts/interfaces/registries/IIPAccountRegistry.sol\";\nimport { IERC6551Registry } from \"lib/reference/src/interfaces/IERC6551Registry.sol\";\n\n/// @title IPAccountRegistry\n/// @notice This contract is responsible for managing the registration and tracking of IP Accounts.\n/// It leverages a public ERC6551 registry to deploy IPAccount contracts.\ncontract IPAccountRegistry is IIPAccountRegistry {\n    address public immutable IP_ACCOUNT_IMPL;\n    bytes32 public immutable IP_ACCOUNT_SALT;\n    address public immutable ERC6551_PUBLIC_REGISTRY;\n    address public immutable ACCESS_CONTROLLER;\n\n    error NonExistIpAccountImpl();\n\n    /// @notice Constructor for the IPAccountRegistry contract.\n    /// @param erc6551Registry_ The address of the ERC6551 registry.\n    /// @param accessController_ The address of the access controller.\n    /// @param ipAccountImpl_ The address of the IP account implementation.\n    constructor(address erc6551Registry_, address accessController_, address ipAccountImpl_) {\n        if (ipAccountImpl_ == address(0)) revert NonExistIpAccountImpl();\n        IP_ACCOUNT_IMPL = ipAccountImpl_;\n        IP_ACCOUNT_SALT = bytes32(0);\n        ERC6551_PUBLIC_REGISTRY = erc6551Registry_;\n        ACCESS_CONTROLLER = accessController_;\n    }\n\n    /// @notice Deploys an IPAccount contract with the IPAccount implementation and returns the address of the new IP.\n    /// @param chainId_ The chain ID where the IP Account will be created.\n    /// @param tokenContract_ The address of the token contract to be associated with the IP Account.\n    /// @param tokenId_ The ID of the token to be associated with the IP Account.\n    /// @return ipAccountAddress The address of the newly created IP Account.\n    function registerIpAccount(\n        uint256 chainId_,\n        address tokenContract_,\n        uint256 tokenId_\n    ) external returns (address ipAccountAddress) {\n        bytes memory initData = abi.encodeWithSignature(\"initialize(address)\", ACCESS_CONTROLLER);\n        ipAccountAddress = IERC6551Registry(ERC6551_PUBLIC_REGISTRY).createAccount(\n            IP_ACCOUNT_IMPL,\n            IP_ACCOUNT_SALT,\n            chainId_,\n            tokenContract_,\n            tokenId_\n        );\n        (bool success, bytes memory result) = ipAccountAddress.call(initData);\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n        emit IPAccountRegistered(ipAccountAddress, IP_ACCOUNT_IMPL, chainId_, tokenContract_, tokenId_);\n    }\n\n    /// @notice Returns the IPAccount address for the given NFT token.\n    /// @param chainId_ The chain ID where the IP Account is located.\n    /// @param tokenContract_ The address of the token contract associated with the IP Account.\n    /// @param tokenId_ The ID of the token associated with the IP Account.\n    /// @return The address of the IP Account associated with the given NFT token.\n    function ipAccount(uint256 chainId_, address tokenContract_, uint256 tokenId_) external view returns (address) {\n        return _get6551AccountAddress(chainId_, tokenContract_, tokenId_);\n    }\n\n    /// @notice Returns the IPAccount implementation address.\n    /// @return The address of the IPAccount implementation.\n    function getIPAccountImpl() external view override returns (address) {\n        return IP_ACCOUNT_IMPL;\n    }\n\n    function _get6551AccountAddress(\n        uint256 chainId_,\n        address tokenContract_,\n        uint256 tokenId_\n    ) internal view returns (address) {\n        return\n            IERC6551Registry(ERC6551_PUBLIC_REGISTRY).account(\n                IP_ACCOUNT_IMPL,\n                IP_ACCOUNT_SALT,\n                chainId_,\n                tokenContract_,\n                tokenId_\n            );\n    }\n}\n"
    },
    "contracts/registries/IPRecordRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { REGISTRATION_MODULE_KEY } from \"contracts/lib/modules/Module.sol\";\nimport { IIPRecordRegistry } from \"contracts/interfaces/registries/IIPRecordRegistry.sol\";\nimport { IIPAccountRegistry } from \"contracts/interfaces/registries/IIPAccountRegistry.sol\";\nimport { IModuleRegistry } from \"contracts/interfaces/registries/IModuleRegistry.sol\";\nimport { Errors } from \"contracts/lib/Errors.sol\";\n\n/// @title IP Record Registry\n/// @notice This contract acts as the source of truth for all IP registered in\n///         Story Protocol. An IP is identified by its contract address, token\n///         id, and coin type, meaning any NFT may be conceptualized as an IP.\n///         Once an IP is registered into the protocol, a corresponding IP\n///         record is generated, which references an IP resolver for metadata\n///         attribution and an IP account for protocol authorization. Only\n///         approved registration modules may register IP into this registry.\n///         IMPORTANT: The IP account address, besides being used for protocol\n///                    auth, is also the canonical IP identifier for the IP NFT.\ncontract IPRecordRegistry is IIPRecordRegistry {\n    /// @notice Gets the factory contract used for IP account creation.\n    IIPAccountRegistry public immutable IP_ACCOUNT_REGISTRY;\n\n    /// @notice Gets the protocol-wide module registry.\n    IModuleRegistry public immutable MODULE_REGISTRY;\n\n    /// @notice Tracks the total number of IP records in existence.\n    uint256 public totalSupply = 0;\n\n    /// @dev Maps an IP, identified by its IP ID, to a metadata resolver.\n    mapping(address => address) internal _resolvers;\n\n    /// @notice Restricts calls to only originate from the registration module.\n    modifier onlyRegistrationModule() {\n        if (address(MODULE_REGISTRY.getModule(REGISTRATION_MODULE_KEY)) != msg.sender) {\n            revert Errors.IPRecordRegistry_Unauthorized();\n        }\n        _;\n    }\n\n    /// @notice Initializes the IP Record Registry.\n    /// @param moduleRegistry The address of the protocol module registry.\n    /// @param ipAccountRegistry The address of the IP account registry.\n    constructor(address moduleRegistry, address ipAccountRegistry) {\n        IP_ACCOUNT_REGISTRY = IIPAccountRegistry(ipAccountRegistry);\n        MODULE_REGISTRY = IModuleRegistry(moduleRegistry);\n    }\n\n    /// @notice Gets the canonical IP identifier associated with an IP NFT.\n    /// @dev This is equivalent to the address of its bound IP account.\n    /// @param chainId The chain identifier of where the IP resides.\n    /// @param tokenContract The address of the IP.\n    /// @param tokenId The token identifier of the IP.\n    /// @return The IP's canonical address identifier.\n    function ipId(uint256 chainId, address tokenContract, uint256 tokenId) public view returns (address) {\n        return IP_ACCOUNT_REGISTRY.ipAccount(chainId, tokenContract, tokenId);\n    }\n\n    /// @notice Checks whether an IP was registered based on its ID.\n    /// @param id The canonical identifier for the IP.\n    /// @return Whether the IP was registered into the protocol.\n    function isRegistered(address id) external view returns (bool) {\n        return _resolvers[id] != address(0);\n    }\n\n    /// @notice Checks whether an IP was registered based on its NFT attributes.\n    /// @param chainId The chain identifier of where the NFT resides.\n    /// @param tokenContract The address of the NFT.\n    /// @param tokenId The token identifier of the NFT.\n    /// @return Whether the NFT was registered into the protocol as IP.\n    function isRegistered(uint256 chainId, address tokenContract, uint256 tokenId) external view returns (bool) {\n        address id = ipId(chainId, tokenContract, tokenId);\n        return _resolvers[id] != address(0);\n    }\n\n    /// @notice Gets the resolver bound to an IP based on its ID.\n    /// @param id The canonical identifier for the IP.\n    /// @return The IP resolver address if registered, else the zero address.\n    function resolver(address id) external view returns (address) {\n        return _resolvers[id];\n    }\n\n    /// @notice Gets the resolver bound to an IP based on its NFT attributes.\n    /// @param chainId The chain identifier of where the NFT resides.\n    /// @param tokenContract The address of the NFT.\n    /// @param tokenId The token identifier of the NFT.\n    /// @return The IP resolver address if registered, else the zero address.\n    function resolver(uint256 chainId, address tokenContract, uint256 tokenId) external view returns (address) {\n        address id = ipId(chainId, tokenContract, tokenId);\n        return _resolvers[id];\n    }\n\n    /// @notice Registers an NFT as an IP, creating a corresponding IP record.\n    /// @param chainId The chain identifier of where the NFT resides.\n    /// @param tokenContract The address of the NFT.\n    /// @param tokenId The token identifier of the NFT.\n    /// @param createAccount Whether to create an IP account when registering.\n    function register(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        address resolverAddr,\n        bool createAccount\n    ) external onlyRegistrationModule {\n        address id = ipId(chainId, tokenContract, tokenId);\n        if (_resolvers[id] != address(0)) {\n            revert Errors.IPRecordRegistry_AlreadyRegistered();\n        }\n\n        // This is to emphasize the semantic differences between utilizing the\n        // IP account as an identifier versus as an account used for auth.\n        address account = id;\n\n        if (account.code.length == 0 && createAccount) {\n            _createIPAccount(chainId, tokenContract, tokenId);\n        }\n        _setResolver(id, resolverAddr);\n        totalSupply++;\n        emit IPRegistered(id, chainId, tokenContract, tokenId, resolverAddr);\n    }\n\n    /// @notice Creates the IP account for the specified IP.\n    /// @custom:note For now, we assume that every IP is uniquely tied to an IP\n    ///              account deployed by the IP account registry. However, this\n    ///              may change in the future, hence the distinguishing between\n    ///              IP accounts as identifiers vs. authentication primitives.\n    /// @param chainId The chain identifier of where the NFT resides.\n    /// @param tokenContract The address of the NFT.\n    /// @param tokenId The token identifier of the NFT.\n    function createIPAccount(uint256 chainId, address tokenContract, uint256 tokenId) external returns (address) {\n        address account = IP_ACCOUNT_REGISTRY.ipAccount(chainId, tokenContract, tokenId);\n        // TODO: Finalize disambiguation between IP accounts and IP identifiers.\n        if (account.code.length != 0) {\n            revert Errors.IPRecordRegistry_IPAccountAlreadyCreated();\n        }\n        return _createIPAccount(chainId, tokenContract, tokenId);\n    }\n\n    /// @notice Sets the resolver for an IP based on its NFT attributes.\n    /// @param chainId The chain identifier of where the NFT resides.\n    /// @param tokenContract The address of the NFT.\n    /// @param tokenId The token identifier of the NFT.\n    /// @param resolverAddr The address of the resolver being set.\n    function setResolver(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        address resolverAddr\n    ) external onlyRegistrationModule {\n        address id = ipId(chainId, tokenContract, tokenId);\n        setResolver(id, resolverAddr);\n    }\n\n    /// @notice Sets the resolver for an IP based on its canonical ID.\n    /// @param id The canonical ID of the IP.\n    /// @param resolverAddr The address of the resolver being set.\n    function setResolver(address id, address resolverAddr) public onlyRegistrationModule {\n        if (resolverAddr == address(0)) {\n            revert Errors.IPRecordRegistry_ResolverInvalid();\n        }\n        // Resolvers may not be set unless the IP was registered into the protocol.\n        if (_resolvers[id] == address(0)) {\n            revert Errors.IPRecordRegistry_NotYetRegistered();\n        }\n        _setResolver(id, resolverAddr);\n    }\n\n    /// @dev Creates an IP account for the specified IP (NFT).\n    /// @param chainId The chain identifier of where the NFT resides.\n    /// @param tokenContract The address of the NFT.\n    /// @param tokenId The token identifier of the NFT.\n    function _createIPAccount(\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) internal returns (address account) {\n        account = IP_ACCOUNT_REGISTRY.registerIpAccount(chainId, tokenContract, tokenId);\n        emit IPAccountSet(account, chainId, tokenContract, tokenId);\n    }\n\n    /// @dev Sets the resolver for the specified IP.\n    /// @param id The canonical identifier for the specified IP.\n    /// @param resolverAddr The address of the IP resolver.\n    function _setResolver(address id, address resolverAddr) internal {\n        _resolvers[id] = resolverAddr;\n        emit IPResolverSet(id, resolverAddr);\n    }\n}\n"
    },
    "contracts/registries/LicenseRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Licensing } from \"../lib/Licensing.sol\";\nimport { IParamVerifier } from \"../interfaces/licensing/IParamVerifier.sol\";\nimport { Errors } from \"../lib/Errors.sol\";\nimport { ERC1155 } from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n\n// TODO: consider disabling operators/approvals on creation\ncontract LicenseRegistry is ERC1155 {\n\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Strings for *;\n\n    mapping(uint256 => Licensing.Framework) private _frameworks;\n    uint256 private _totalFrameworks;\n\n    mapping(bytes32 => uint256) private _hashedPolicies;\n    mapping(uint256 => Licensing.Policy) private _policies;\n    uint256 private _totalPolicies;\n    // DO NOT remove policies, that rugs derivatives and breaks ordering assumptions in set\n    mapping(address => EnumerableSet.UintSet) private _policiesPerIpId;\n    mapping(address => EnumerableSet.AddressSet) private _ipIdParents;\n\n\n    mapping(bytes32 => uint256) private _hashedLicenses;\n    mapping(uint256 => Licensing.License) private _licenses;\n    \n    /// This tracks the number of licenses registered in the protocol, it will not decrease when a license is burnt.\n    uint256 private _totalLicenses;\n\n    modifier onlyLicensee(uint256 licenseId, address holder) {\n        // Should ERC1155 operator count? IMO is a security risk. Better use ACL\n        if (balanceOf(holder, licenseId) == 0) {\n            revert Errors.LicenseRegistry__NotLicensee();\n        }\n        _;\n    }\n\n    constructor(string memory uri) ERC1155(uri) {}\n\n    /// Adds a license framework to Story Protocol.\n    /// Must be called by protocol admin\n    /// @param fwCreation parameters\n    /// @return frameworkId identifier for framework, starting in 1\n    function addLicenseFramework(Licensing.FrameworkCreationParams calldata fwCreation) external returns(uint256 frameworkId) {\n        // check protocol auth\n        if (bytes(fwCreation.licenseUrl).length == 0 || fwCreation.licenseUrl.equal(\"\")) {\n            revert Errors.LicenseRegistry__EmptyLicenseUrl(); \n        }\n        // Todo: check duplications\n\n        ++_totalFrameworks;\n        _frameworks[_totalFrameworks].licenseUrl = fwCreation.licenseUrl;\n        _frameworks[_totalFrameworks].defaultNeedsActivation = fwCreation.defaultNeedsActivation;\n        _setParamArray(_frameworks[_totalFrameworks], Licensing.ParamVerifierType.Minting, fwCreation.mintingParamVerifiers, fwCreation.mintingParamDefaultValues);\n        _setParamArray(_frameworks[_totalFrameworks], Licensing.ParamVerifierType.Activate, fwCreation.activationParamVerifiers, fwCreation.activationParamDefaultValues);\n        _setParamArray(_frameworks[_totalFrameworks], Licensing.ParamVerifierType.LinkParent, fwCreation.linkParentParamVerifiers, fwCreation.linkParentParamDefaultValues);\n        // Should we add a label?\n        // TODO: emit\n        return _totalFrameworks;\n    }\n\n    /// Convenience method to convert IParamVerifier[] + bytes[] into Parameter[], then stores it in a Framework storage ref\n    /// (Parameter[] can be in storage but not in calldata)\n    /// @param fw storage ref to framework\n    /// @param pvType ParamVerifierType, to know which parameters the arrays correspond to\n    /// @param paramVerifiers verifier array contracts\n    /// @param paramDefaultValues default values for the verifiers. Must be equal in length with paramVerifiers\n    function _setParamArray(\n        Licensing.Framework storage fw,\n        Licensing.ParamVerifierType pvType,\n        IParamVerifier[] calldata paramVerifiers,\n        bytes[] calldata paramDefaultValues\n    ) private {\n        if (paramVerifiers.length != paramDefaultValues.length) {\n            revert Errors.LicenseRegistry__ParamVerifierLengthMismatch();\n        }\n        Licensing.Parameter[] storage params;\n        if (pvType == Licensing.ParamVerifierType.Minting) {\n            params = fw.mintingParams;\n        } else if (pvType == Licensing.ParamVerifierType.Activate) {\n            params = fw.activationParams;\n        } else if (pvType == Licensing.ParamVerifierType.LinkParent) {\n            params = fw.linkParentParams;\n        } else {\n            revert Errors.LicenseRegistry__InvalidParamVerifierType();\n        }\n        for (uint256 i = 0; i < paramVerifiers.length; i++) {\n            params.push(Licensing.Parameter({\n                verifier: paramVerifiers[i],\n                defaultValue: paramDefaultValues[i]\n            }));\n        }\n    }\n\n    /// Gets total frameworks supported by LicenseRegistry\n    function totalFrameworks() external view returns(uint256) {\n        return _totalFrameworks;\n    }\n\n    /// Returns framework for id. Reverts if not found\n    function framework(uint256 frameworkId) public view returns(Licensing.Framework memory fw) {\n        fw = _frameworks[frameworkId];\n        if (bytes(fw.licenseUrl).length == 0) {\n            revert Errors.LicenseRegistry__FrameworkNotFound(); \n        }\n        return fw;\n    }\n\n    /// Convenience method to store data without repetition, assigning an id to it if new or reusing the existing one if already stored\n    /// @param data raw bytes, abi.encode() a value to be hashed\n    /// @param _hashToIds storage ref to the mapping of hash -> data id\n    /// @param existingIds amount of distinct data stored.\n    /// @return id new sequential id if new data, reused id if not new\n    /// @return isNew true if a new id was generated, signaling the value was stored in _hashToIds. False if id is reused and data was not stored\n    function _addIdOrGetExisting(bytes memory data, mapping(bytes32 => uint256) storage _hashToIds, uint256 existingIds) private returns(uint256 id, bool isNew) {\n        // We could just use the hash of the policy as id to save some gas, but the UX/DX of having huge random\n        // numbers for ID is bad enough to justify the cost, plus we have accountability on current number of\n        // policies.\n        bytes32 hash = keccak256(data);\n        uint256 id = _hashToIds[hash];\n        if (id != 0) {\n            return (id, false);\n        }\n        id = existingIds + 1;\n        _hashToIds[hash] = id;\n        return (id, true);\n    }\n \n    /// Adds a policy to an ipId, which can be used to mint licenses, which are permissions for ipIds to be derivatives (children).\n    /// If an exact policy already existed, it will reuse the id.\n    /// Will revert if ipId already has the same policy\n    /// @param ipId to receive the policy\n    /// @param pol policy data\n    /// @return policyId if policy data was in the contract, policyId is reused, if it's new, id will be new.\n    /// @return indexOnIpId position of policy within the ipIds policy set\n    function addPolicy(address ipId, Licensing.Policy memory pol) public returns(uint256 policyId, uint256 indexOnIpId) {\n        // check protocol auth\n        Licensing.Framework memory fw = framework(pol.frameworkId);\n        // TODO: check if policy is compatible with existing or is allowed to add more\n        (uint256 polId, bool isNew) = _addIdOrGetExisting(abi.encode(pol), _hashedPolicies, _totalPolicies);\n        policyId = polId;\n        if (isNew) {\n            _totalPolicies = polId;\n            _policies[polId] = pol;\n            // TODO: emit\n        }\n        return (policyId, _addPolictyId(ipId, policyId));\n    }\n\n    /// Adds a policy id to the ipId policy set\n    /// Will revert if policy set already has policyId\n    /// @param ipId the IP identifier\n    /// @param policyId id of the policy data\n    /// @return index of the policy added to the set\n    function _addPolictyId(address ipId, uint256 policyId) internal returns(uint256 index) {\n        EnumerableSet.UintSet storage policySet = _policiesPerIpId[ipId];\n        // TODO: check if policy is compatible with the others\n        if (!policySet.add(policyId)) {\n            revert Errors.LicenseRegistry__PolicyAlreadySetForIpId();\n        }\n        // TODO: emit\n        return policySet.length() - 1;\n    }\n\n    /// Returns amount of distinct licensing policies in LicenseRegistry\n    function totalPolicies() external view returns(uint256) {\n        return _totalPolicies;\n    }\n\n    /// Gets policy data for policyId, reverts if not found\n    function policy(uint256 policyId) public view returns(Licensing.Policy memory pol) {\n        pol = _policies[policyId];\n        if (pol.frameworkId == 0) {\n            revert Errors.LicenseRegistry__PolicyNotFound();\n        }\n        return pol;\n    }\n\n    /// Gets the policy set for an IpId\n    /// @dev potentially expensive operation, use with care\n    function policyIdsForIp(address ipId) external view returns(uint256[] memory policyIds) {\n        return _policiesPerIpId[ipId].values();\n    }\n\n    function totalPoliciesForIp(address ipId) external view returns(uint256) {\n        return _policiesPerIpId[ipId].length();\n    }\n\n    function isPolicyIdSetForIp(address ipId, uint256 policyId) external view returns(bool) {\n        return _policiesPerIpId[ipId].contains(policyId);\n    }\n\n    function policyIdForIpAtIndex(address ipId, uint256 index) external view returns(uint256 policyId) {\n        return _policiesPerIpId[ipId].at(index);\n    }\n\n    function policyForIpAtIndex(address ipId, uint256 index) external view returns(Licensing.Policy memory) {\n        return _policies[_policiesPerIpId[ipId].at(index)];\n    }\n\n    /// Mints license NFTs representing a licensing policy granted by a set of ipIds (licensors). This NFT needs to be burned\n    /// in order to link a derivative IP with its parents.\n    /// If this is the first combination of policy and licensors, a new licenseId will be created (by incrementing prev totalLicenses).\n    /// If not, the license is fungible and an id will be reused.\n    /// The licensing terms that regulate creating new licenses will be verified to allow minting.\n    /// Reverts if caller is not authorized by licensors.\n    /// @param licenseData policy Id and licensors\n    /// @param amount of licenses to be minted. License NFT is fungible for same policy and same licensors\n    /// @param receiver of the License NFT(s).\n    /// @return licenseId of the NFT(s).\n    function mintLicense(Licensing.License calldata licenseData, uint256 amount, address receiver) external returns(uint256 licenseId) {\n        uint256 policyId = licenseData.policyId;\n        \n        for(uint256 i = 0; i < licenseData.licensorIpIds.length; i++) {\n            address licensor = licenseData.licensorIpIds[i];\n            if(!_policiesPerIpId[licensor].contains(policyId)) {\n                revert Errors.LicenseRegistry__LicensorDoesntHaveThisPolicy();\n            }\n            // TODO: check duplicates\n            // TODO: check if licensors are valid IP Ids and if they have been tagged bad\n            // TODO: check if licensor allowed sender to mint in their behalf\n        }\n        \n        Licensing.Policy memory pol = policy(policyId);\n\n        Licensing.Parameter[] memory mintParams = _frameworks[pol.frameworkId].mintingParams;\n        bytes[] memory mintParamValues = pol.mintingParamValues;\n        for (uint256 i=0; i < mintParams.length; i++) {\n            Licensing.Parameter memory param = mintParams[i];\n            // Empty bytes => use default value specified in license framework creation params.\n            bytes memory data = mintParamValues[i].length == 0 ? param.defaultValue : mintParamValues[i];\n            // TODO: is `caller` param `msg.sender` or `receiver` or something else?\n            if (!param.verifier.verifyMintingParam(receiver, amount, data)) {\n                revert Errors.LicenseRegistry__MintParamFailed();\n            }\n        }\n\n        (uint256 lId, bool isNew) = _addIdOrGetExisting(abi.encode(licenseData), _hashedLicenses, _totalLicenses);\n        licenseId = lId;\n        if (isNew) {\n            _totalLicenses = licenseId;\n            _licenses[licenseId] = licenseData;\n            // TODO: emit\n        }\n        _mint(receiver, licenseId, amount, \"\");\n        return licenseId;\n    }\n\n    /// Returns true if holder has positive balance for licenseId\n    function isLicensee(uint256 licenseId, address holder) external view returns(bool) {\n        return balanceOf(holder, licenseId) > 0;\n    }\n\n    /// Relates an IP ID with its parents (licensors), by burning the License NFT the holder owns\n    /// License must be activated to succeed, reverts otherwise.\n    /// Licensing parameters related to linking IPAs must be verified in order to succeed, reverts otherwise.\n    /// The child IP ID will have the policy that the license represent added to it's own, if it's compatible with \n    /// existing child policies.\n    /// The child IP ID will be linked to the parent (if it wasn't before).\n    /// @param licenseId license NFT to be burned\n    /// @param childIpId that will receive the policy defined by licenseId\n    /// @param holder of the license NFT\n    function setParentPolicy(uint256 licenseId, address childIpId, address holder)\n        external\n        onlyLicensee(licenseId, holder) {\n        // TODO: auth\n        // TODO: check if license is activated\n        // TODO: check if childIpId exists and is owned by holder\n        Licensing.License memory licenseData = _licenses[licenseId];\n        address[] memory parents = licenseData.licensorIpIds;\n        for (uint256 i=0; i < parents.length; i++) {\n            // TODO: check licensor exist\n            // TODO: check licensor part of a bad tag branch\n        }\n        \n        Licensing.Policy memory pol = policy(licenseData.policyId);\n        \n        Licensing.Parameter[] memory linkParams = _frameworks[pol.frameworkId].linkParentParams;\n        bytes[] memory linkParamValues = pol.linkParentParamValues;\n        for (uint256 i=0; i < linkParams.length; i++) {\n            Licensing.Parameter memory param = linkParams[i];\n            // Empty bytes => use default value specified in license framework creation params.\n            bytes memory data = linkParamValues[i].length == 0 ? param.defaultValue : linkParamValues[i];\n            if (!param.verifier.verifyLinkParentParam(holder, data)) {\n                revert Errors.LicenseRegistry__LinkParentParamFailed();\n            }\n        }\n\n        // Add policy to kid\n        addPolicy(childIpId, pol);\n        // Set parent\n        for (uint256 i=0; i < parents.length; i++) {\n            // We don't care if it was already a parent, because there might be a case such as:\n            // 1. IP2 is created from IP1 with L1(non commercial)\n            // 2. IP1 releases L2 with commercial terms, and IP2 wants permission to commercially exploit\n            // 3. IP2 gets L2, burns it to set commercial policy\n            address parent = parents[i];\n            if (parent == childIpId) {\n                revert Errors.LicenseRegistry__ParentIdEqualThanChild();\n            }\n            _ipIdParents[childIpId].add(parent);\n            // TODO: emit\n        }\n        \n        // Burn license\n        _burn(holder, licenseId, 1);\n    }\n\n    /// Returns true if the child is derivative from the parent, by at least 1 policy.\n    function isParent(address parentIpId, address childIpId) external view returns(bool) {\n        return _ipIdParents[childIpId].contains(parentIpId);\n    }\n\n    function parentIpIds(address ipId) external view returns(address[] memory) {\n        return _ipIdParents[ipId].values();\n    }\n\n    function totalParentsForIpId(address ipId) external view returns(uint256) {\n        return _ipIdParents[ipId].length();\n    }\n\n    // TODO: activation method\n\n    // TODO: tokenUri from parameters, from a metadata resolver contract\n\n}"
    },
    "contracts/registries/ModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { IModuleRegistry } from \"contracts/interfaces/registries/IModuleRegistry.sol\";\nimport { Errors } from \"contracts/lib/Errors.sol\";\nimport { IModule } from \"contracts/interfaces/modules/base/IModule.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/// @title ModuleRegistry\ncontract ModuleRegistry is IModuleRegistry {\n    using Strings for *;\n\n    mapping(string => address) public _modules;\n    mapping(address => bool) public _isModule;\n\n    /// @notice Registers a new module in the protocol.\n    /// @param name The name of the module.\n    /// @param moduleAddress The address of the module.\n    function registerModule(string memory name, address moduleAddress) external {\n        // TODO: check can only called by protocol admin\n        if (moduleAddress == address(0)) {\n            revert Errors.ModuleRegistry__ModuleAddressZeroAddress();\n        }\n        if (moduleAddress.code.length == 0) {\n            revert Errors.ModuleRegistry__ModuleAddressNotContract();\n        }\n        if (_isModule[moduleAddress]) {\n            revert Errors.ModuleRegistry__ModuleAlreadyRegistered();\n        }\n        if (bytes(name).length == 0) {\n            revert Errors.ModuleRegistry__NameEmptyString();\n        }\n        if (_modules[name] != address(0)) {\n            revert Errors.ModuleRegistry__NameAlreadyRegistered();\n        }\n        if (!IModule(moduleAddress).name().equal(name)) {\n            revert Errors.ModuleRegistry__NameDoesNotMatch();\n        }\n        _modules[name] = moduleAddress;\n        _isModule[moduleAddress] = true;\n\n        emit ModuleAdded(name, moduleAddress);\n    }\n\n    /// @notice Removes a module from the protocol.\n    /// @param name The name of the module to be removed.\n    function removeModule(string memory name) external {\n        if (bytes(name).length == 0) {\n            revert Errors.ModuleRegistry__NameEmptyString();\n        }\n\n        if (_modules[name] == address(0)) {\n            revert Errors.ModuleRegistry__ModuleNotRegistered();\n        }\n\n        address module = _modules[name];\n        delete _modules[name];\n        delete _isModule[module];\n\n        emit ModuleRemoved(name, module);\n    }\n\n    /// @notice Returns the address of a module.\n    /// @param name The name of the module.\n    /// @return The address of the module.\n    function getModule(string memory name) external view returns (address) {\n        return _modules[name];\n    }\n\n    /// @notice Checks if a module is registered in the protocol.\n    /// @param moduleAddress The address of the module.\n    /// @return True if the module is registered, false otherwise.\n    function isRegistered(address moduleAddress) external view returns (bool) {\n        return _isModule[moduleAddress];\n    }\n}\n"
    },
    "contracts/resolvers/IPMetadataResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { Base64 } from \"@openzeppelin/contracts/utils/Base64.sol\";\nimport { IResolver } from \"contracts/interfaces/resolvers/IResolver.sol\";\nimport { ResolverBase } from \"./ResolverBase.sol\";\nimport { IIPMetadataResolver } from \"contracts/interfaces/resolvers/IIPMetadataResolver.sol\";\nimport { IIPAccount } from \"contracts/interfaces/IIPAccount.sol\";\nimport { Errors } from \"contracts/lib/Errors.sol\";\nimport { IP } from \"contracts/lib/IP.sol\";\n\n/// @title IP Metadata Resolver\n/// @notice Canonical IP resolver contract used for Story Protocol. This will\n///         likely change to a separate contract that extends IPMetadataResolver\n///         in the near future.\ncontract IPMetadataResolver is IIPMetadataResolver, ResolverBase {\n    /// @dev Maps IP to their metadata records based on their canonical IDs.\n    mapping(address => IP.MetadataRecord) public _records;\n\n    /// @notice Initializes the IP metadata resolver.\n    /// @param accessController The access controller used for IP authorization.\n    /// @param ipRecordRegistry The address of the IP record registry.\n    /// @param ipAccountRegistry The address of the IP account registry.\n    constructor(\n        address accessController,\n        address ipRecordRegistry,\n        address ipAccountRegistry\n    ) ResolverBase(accessController, ipRecordRegistry, ipAccountRegistry) {}\n\n    /// @notice Fetches all metadata associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function metadata(address ipId) public view returns (IP.Metadata memory) {\n        IP.MetadataRecord memory record = _records[ipId];\n        return\n            IP.Metadata({\n                owner: owner(ipId),\n                name: record.name,\n                description: record.description,\n                hash: record.hash,\n                registrationDate: record.registrationDate,\n                registrant: record.registrant,\n                uri: uri(ipId)\n            });\n    }\n\n    /// @notice Fetches the canonical name associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function name(address ipId) external view returns (string memory) {\n        return _records[ipId].name;\n    }\n\n    /// @notice Fetches the description associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @return The string descriptor of the IP.\n    function description(address ipId) external view returns (string memory) {\n        return _records[ipId].description;\n    }\n\n    /// @notice Fetches the keccak-256 hash associated with the specified IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @return The bytes32 content hash of the IP.\n    function hash(address ipId) external view returns (bytes32) {\n        return _records[ipId].hash;\n    }\n\n    /// @notice Fetches the date of registration of the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function registrationDate(address ipId) external view returns (uint64) {\n        return _records[ipId].registrationDate;\n    }\n\n    /// @notice Fetches the initial registrant of the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function registrant(address ipId) external view returns (address) {\n        return _records[ipId].registrant;\n    }\n\n    /// @notice Fetches the current owner of the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function owner(address ipId) public view returns (address) {\n        if (!IP_RECORD_REGISTRY.isRegistered(ipId)) {\n            return address(0);\n        }\n        return IIPAccount(payable(ipId)).owner();\n    }\n\n    /// @notice Fetches an IP owner defined URI associated with the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    function uri(address ipId) public view returns (string memory) {\n        if (!IP_RECORD_REGISTRY.isRegistered(ipId)) {\n            return \"\";\n        }\n\n        IP.MetadataRecord memory record = _records[ipId];\n        string memory ipUri = record.uri;\n\n        if (bytes(ipUri).length > 0) {\n            return ipUri;\n        }\n\n        return _defaultTokenURI(ipId, record);\n    }\n\n    /// @notice Sets metadata associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param newMetadata The new metadata to set for the IP.\n    function setMetadata(address ipId, IP.MetadataRecord calldata newMetadata) external onlyAuthorized(ipId) {\n        _records[ipId] = newMetadata;\n    }\n\n    /// @notice Sets the name associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param newName The new string name to associate with the IP.\n    function setName(address ipId, string calldata newName) external onlyAuthorized(ipId) {\n        _records[ipId].name = newName;\n    }\n\n    /// @notice Sets the description associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param newDescription The string description to associate with the IP.\n    function setDescription(address ipId, string calldata newDescription) external onlyAuthorized(ipId) {\n        _records[ipId].description = newDescription;\n    }\n\n    /// @notice Sets the keccak-256 hash associated with an IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param newHash The keccak-256 hash to associate with the IP.\n    function setHash(address ipId, bytes32 newHash) external onlyAuthorized(ipId) {\n        _records[ipId].hash = newHash;\n    }\n\n    /// @notice Sets an IP owner defined URI to associate with the IP.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param newURI The new token URI to set for the IP.\n    function setURI(address ipId, string calldata newURI) external onlyAuthorized(ipId) {\n        _records[ipId].uri = newURI;\n    }\n\n    /// @notice Checks whether the resolver interface is supported.\n    /// @param id The resolver interface identifier.\n    /// @return Whether the resolver interface is supported.\n    function supportsInterface(bytes4 id) public view virtual override(IResolver, ResolverBase) returns (bool) {\n        return id == type(IIPMetadataResolver).interfaceId || super.supportsInterface(id);\n    }\n\n    /// @dev Internal function for generating a default IP URI if not provided.\n    /// @param ipId The canonical ID of the specified IP.\n    /// @param record The IP record associated with the IP.\n    function _defaultTokenURI(address ipId, IP.MetadataRecord memory record) internal view returns (string memory) {\n        string memory baseJson = string(\n            /* solhint-disable */\n            abi.encodePacked(\n                '{\"name\": \"IP Asset #',\n                Strings.toHexString(ipId),\n                '\", \"description\": \"',\n                record.description,\n                '\", \"attributes\": ['\n            )\n            /* solhint-enable */\n        );\n\n        string memory ipAttributes = string(\n            /* solhint-disable */\n            abi.encodePacked(\n                '{\"trait_type\": \"Name\", \"value\": \"',\n                record.name,\n                '\"},'\n                '{\"trait_type\": \"Owner\", \"value\": \"',\n                Strings.toHexString(uint160(owner(ipId)), 20),\n                '\"},'\n                '{\"trait_type\": \"Registrant\", \"value\": \"',\n                Strings.toHexString(uint160(record.registrant), 20),\n                '\"},',\n                '{\"trait_type\": \"Hash\", \"value\": \"',\n                Strings.toHexString(uint256(record.hash), 32),\n                '\"},',\n                '{\"trait_type\": \"Registration Date\", \"value\": \"',\n                Strings.toString(record.registrationDate),\n                '\"}'\n            )\n            /* solhint-enable */\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(bytes(string(abi.encodePacked(baseJson, ipAttributes, \"]}\"))))\n                )\n            );\n    }\n}\n"
    },
    "contracts/resolvers/ResolverBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.21;\n\nimport { IAccessController } from \"contracts/interfaces/IAccessController.sol\";\nimport { IPRecordRegistry } from \"contracts/registries/IPRecordRegistry.sol\";\nimport { IPAccountRegistry } from \"contracts/registries/IPAccountRegistry.sol\";\nimport { IResolver } from \"contracts/interfaces/resolvers/IResolver.sol\";\nimport { Errors } from \"contracts/lib/Errors.sol\";\n\n/// @notice IP Resolver Base Contract\nabstract contract ResolverBase is IResolver {\n    /// @notice Gets the protocol-wide module access controller.\n    IAccessController public immutable ACCESS_CONTROLLER;\n\n    /// @notice Gets the protocol-wide IP account registry.\n    IPAccountRegistry public immutable IP_ACCOUNT_REGISTRY;\n\n    /// @notice Gets the protocol-wide IP record registry.\n    IPRecordRegistry public immutable IP_RECORD_REGISTRY;\n\n    /// @notice Checks if IP identified by ipId is authorized to perform a call.\n    /// @param ipId The identifier for the IP being authorized.\n    modifier onlyAuthorized(address ipId) {\n        if (!ACCESS_CONTROLLER.checkPermission(ipId, msg.sender, address(this), msg.sig)) {\n            revert Errors.IPResolver_Unauthorized();\n        }\n        _;\n    }\n\n    /// @notice Initializes the base IP resolver contract.\n    /// @param controller The address of the module access controller.\n    /// @param recordRegistry The address of the IP record registry.\n    /// @param accountRegistry The address of the IP account registry.\n    constructor(address controller, address recordRegistry, address accountRegistry) {\n        ACCESS_CONTROLLER = IAccessController(controller);\n        IP_RECORD_REGISTRY = IPRecordRegistry(recordRegistry);\n        IP_ACCOUNT_REGISTRY = IPAccountRegistry(accountRegistry);\n    }\n\n    /// @notice Gets the access controller responsible for resolver auth.\n    /// @return The address of the access controller.\n    function accessController() external view returns (address) {\n        return address(ACCESS_CONTROLLER);\n    }\n\n    /// @notice Checks whether the resolver interface is supported.\n    /// @param id The resolver interface identifier.\n    /// @return Whether the resolver interface is supported.\n    function supportsInterface(bytes4 id) public view virtual override returns (bool) {\n        return id == type(IResolver).interfaceId;\n    }\n}\n"
    },
    "contracts/utils/ShortStringOps.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// See https://github.com/storyprotocol/protocol-contracts/blob/main/StoryProtocol-AlphaTestingAgreement-17942166.3.pdf\npragma solidity ^0.8.19;\n\nimport { ShortString, ShortStrings } from \"@openzeppelin/contracts/utils/ShortStrings.sol\";\n\n/// @notice Library for working with Openzeppelin's ShortString data types.\nlibrary ShortStringOps {\n    using ShortStrings for *;\n\n    /// @dev Compares whether two ShortStrings are equal.\n    function equal(ShortString a, ShortString b) internal pure returns (bool) {\n        return ShortString.unwrap(a) == ShortString.unwrap(b);\n    }\n\n    /// @dev Checks whether a ShortString and a regular string are equal.\n    function equal(ShortString a, string memory b) internal pure returns (bool) {\n        return equal(a, b.toShortString());\n    }\n\n    /// @dev Checks whether a regular string and a ShortString are equal.\n    function equal(string memory a, ShortString b) internal pure returns (bool) {\n        return equal(a.toShortString(), b);\n    }\n\n    /// @dev Checks whether a bytes32 object and ShortString are equal.\n    function equal(bytes32 a, ShortString b) internal pure returns (bool) {\n        return a == ShortString.unwrap(b);\n    }\n\n    /// @dev Checks whether a string and bytes32 object are equal.\n    function equal(string memory a, bytes32 b) internal pure returns (bool) {\n        return equal(a, ShortString.wrap(b));\n    }\n\n    /// @dev Checks whether a bytes32 object and string are equal.\n    function equal(bytes32 a, string memory b) internal pure returns (bool) {\n        return equal(ShortString.wrap(a), b);\n    }\n\n    function stringToBytes32(string memory s) internal pure returns (bytes32) {\n        return ShortString.unwrap(s.toShortString());\n    }\n}\n\nlibrary EnumerableShortStringSet {\n\n}"
    },
    "interfaces/modules/dispute-module/IDisputeModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\n/// @title Dispute Module Interface\ninterface IDisputeModule {\n    /// @notice Whitelists a dispute tag\n    /// @param tag The dispute tag\n    /// @param allowed Indicates if the dispute tag is whitelisted or not\n    function whitelistDisputeTags(bytes32 tag, bool allowed) external;\n\n    /// @notice Whitelists an arbitration policy\n    /// @param arbitrationPolicy The address of the arbitration policy\n    /// @param allowed Indicates if the arbitration policy is whitelisted or not\n    function whitelistArbitrationPolicy(address arbitrationPolicy, bool allowed) external;\n\n    /// @notice Whitelists an arbitration relayer for a given arbitration policy\n    /// @param arbitrationPolicy The address of the arbitration policy\n    /// @param arbPolicyRelayer The address of the arbitration relayer\n    /// @param allowed Indicates if the arbitration relayer is whitelisted or not\n    function whitelistArbitrationRelayer(address arbitrationPolicy, address arbPolicyRelayer, bool allowed) external;\n    \n    /// @notice Raises a dispute\n    /// @param ipId The ipId\n    /// @param arbitrationPolicy The address of the arbitration policy\n    /// @param linkToDisputeSummary The link of the dispute summary\n    /// @param targetTag The target tag of the dispute\n    /// @param data The data to initialize the policy\n    /// @return disputeId The dispute id\n    function raiseDispute(\n        address ipId,\n        address arbitrationPolicy,\n        string memory linkToDisputeSummary,\n        bytes32 targetTag,\n        bytes calldata data\n    ) external returns (uint256 disputeId);\n\n    /// @notice Sets the dispute judgement\n    /// @param disputeId The dispute id\n    /// @param decision The decision of the dispute\n    /// @param data The data to set the dispute judgement\n    function setDisputeJudgement(uint256 disputeId, bool decision, bytes calldata data) external;\n\n    /// @notice Cancels an ongoing dispute\n    /// @param disputeId The dispute id\n    /// @param data The data to cancel the dispute\n    function cancelDispute(uint256 disputeId, bytes calldata data) external;\n\n    /// @notice Resolves a dispute after it has been judged\n    /// @param disputeId The dispute id\n    function resolveDispute(uint256 disputeId) external;\n\n    /// @notice Gets the dispute struct characteristics\n    function disputes(uint256 disputeId) external view returns (\n        address ipId,\n        address disputeInitiator,\n        address arbitrationPolicy,\n        bytes32 linkToDisputeSummary,\n        bytes32 tag\n    );\n}"
    },
    "interfaces/modules/dispute-module/policies/IArbitrationPolicy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\n/// @title ArbitrationPolicy interface\ninterface IArbitrationPolicy {\n    /// @notice Executes custom logic on raise dispute\n    /// @param caller Address of the caller    \n    function onRaiseDispute(address caller, bytes calldata data) external;\n\n    /// @notice Executes custom logic on dispute judgement\n    /// @param disputeId The dispute id\n    /// @param decision The decision of the dispute\n    function onDisputeJudgement(uint256 disputeId, bool decision, bytes calldata data) external;\n\n    /// @notice Executes custom logic on dispute cancel\n    function onDisputeCancel(address caller, uint256 disputeId, bytes calldata data) external;\n}\n"
    },
    "interfaces/modules/royalty-module/IRoyaltyModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\n/// @title RoyaltyModule interface\ninterface IRoyaltyModule {\n    /// @notice Whitelist a royalty policy\n    /// @param royaltyPolicy The address of the royalty policy\n    /// @param allowed Indicates if the royalty policy is whitelisted or not\n    function whitelistRoyaltyPolicy(address royaltyPolicy, bool allowed) external;\n\n    /// @notice Sets the royalty policy for an ipId\n    /// @param ipId The ipId\n    /// @param royaltyPolicy The address of the royalty policy\n    /// @param data The data to initialize the policy\n    function setRoyaltyPolicy(address ipId, address royaltyPolicy, bytes calldata data) external;\n\n    /// @notice Allows an IPAccount to pay royalties\n    /// @param ipId The ipId\n    /// @param token The token to pay the royalties in\n    /// @param amount The amount to pay\n    function payRoyalty(address ipId, address token, uint256 amount) external;\n\n    /// @notice Gets the royalty policy for a given ipId\n    function royaltyPolicies(address ipId) external view returns (address royaltyPolicy);\n}"
    },
    "interfaces/modules/royalty-module/policies/ILiquidSplitClone.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\n/// @title LiquidSplitClone interface\ninterface ILiquidSplitClone {\n    /// @notice Distributes funds to the accounts in the LiquidSplitClone contract\n    /// @param token The token to distribute\n    /// @param accounts The accounts to distribute to\n    /// @param distributorAddress The distributor address    \n    function distributeFunds(address token, address[] calldata accounts, address distributorAddress) external;\n}"
    },
    "interfaces/modules/royalty-module/policies/ILiquidSplitFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\n/// @title LiquidSplitFactory interface\ninterface ILiquidSplitFactory {\n    /// @notice Creates a new LiquidSplitClone contract\n    /// @param accounts The accounts to initialize the LiquidSplitClone contract with\n    /// @param initAllocations The initial allocations \n    /// @param _distributorFee The distributor fee\n    /// @param owner The owner of the LiquidSplitClone contract \n    function createLiquidSplitClone(\n        address[] calldata accounts,\n        uint32[] calldata initAllocations,\n        uint32 _distributorFee,\n        address owner\n    ) external returns (address);\n}"
    },
    "interfaces/modules/royalty-module/policies/ILiquidSplitMain.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @title LiquidSplitMain interface\ninterface ILiquidSplitMain {\n    /// @notice Allows an account to withdraw their accrued and distributed pending amount\n    /// @param account The account to withdraw from\n    /// @param withdrawETH The amount of ETH to withdraw\n    /// @param tokens The tokens to withdraw\n    function withdraw(\n        address account,\n        uint256 withdrawETH,\n        ERC20[] calldata tokens\n    ) external;\n}"
    },
    "interfaces/modules/royalty-module/policies/IRoyaltyPolicy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\n/// @title RoyaltyPolicy interface\ninterface IRoyaltyPolicy {   \n    /// @notice Initializes the royalty policy\n    /// @param ipId The ipId\n    /// @param data The data to initialize the policy \n    function initPolicy(address ipId, bytes calldata data) external;\n\n    /// @notice Allows to pay a royalty\n    /// @param caller The caller\n    /// @param ipId The ipId\n    /// @param token The token to pay\n    /// @param amount The amount to pay\n    function onRoyaltyPayment(address caller, address ipId, address token, uint256 amount) external;\n}"
    },
    "lib/reference/src/interfaces/IERC6551Account.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\ninterface IERC6551Account {\n    /**\n     * @dev Allows the account to receive Ether.\n     *\n     * Accounts MUST implement a `receive` function.\n     *\n     * Accounts MAY perform arbitrary logic to restrict conditions\n     * under which Ether can be received.\n     */\n    receive() external payable;\n\n    /**\n     * @dev Returns the identifier of the non-fungible token which owns the account.\n     *\n     * The return value of this function MUST be constant - it MUST NOT change over time.\n     *\n     * @return chainId       The EIP-155 ID of the chain the token exists on\n     * @return tokenContract The contract address of the token\n     * @return tokenId       The ID of the token\n     */\n    function token()\n        external\n        view\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\n\n    /**\n     * @dev Returns a value that SHOULD be modified each time the account changes state.\n     *\n     * @return The current account state\n     */\n    function state() external view returns (uint256);\n\n    /**\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf\n     * of the account.\n     *\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid.\n     *\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered\n     * a valid signer.\n     *\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\n     * signer or grants signing permissions to other non-holder accounts.\n     *\n     * @param  signer     The address to check signing authorization for\n     * @param  context    Additional data used to determine whether the signer is valid\n     * @return magicValue Magic value indicating whether the signer is valid\n     */\n    function isValidSigner(address signer, bytes calldata context)\n        external\n        view\n        returns (bytes4 magicValue);\n}\n"
    },
    "lib/reference/src/interfaces/IERC6551Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC6551Registry {\n    /**\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\n     */\n    event ERC6551AccountCreated(\n        address account,\n        address indexed implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address indexed tokenContract,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\n     */\n    error AccountCreationFailed();\n\n    /**\n     * @dev Creates a token bound account for a non-fungible token.\n     *\n     * If account has already been created, returns the account address without calling create2.\n     *\n     * Emits ERC6551AccountCreated event.\n     *\n     * @return account The address of the token bound account\n     */\n    function createAccount(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external returns (address account);\n\n    /**\n     * @dev Returns the computed token bound account address for a non-fungible token.\n     *\n     * @return account The address of the token bound account\n     */\n    function account(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external view returns (address account);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}