/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDisputeModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelDispute"
      | "disputes"
      | "raiseDispute"
      | "resolveDispute"
      | "setDisputeJudgement"
      | "whitelistArbitrationPolicy"
      | "whitelistArbitrationRelayer"
      | "whitelistDisputeTags"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelDispute",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [AddressLike, AddressLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeJudgement",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistArbitrationPolicy",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistArbitrationRelayer",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistDisputeTags",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeJudgement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistArbitrationPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistArbitrationRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistDisputeTags",
    data: BytesLike
  ): Result;
}

export interface IDisputeModule extends BaseContract {
  connect(runner?: ContractRunner | null): IDisputeModule;
  waitForDeployment(): Promise<this>;

  interface: IDisputeModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelDispute: TypedContractMethod<
    [disputeId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  disputes: TypedContractMethod<
    [disputeId: BigNumberish],
    [
      [string, string, string, string, string] & {
        ipId: string;
        disputeInitiator: string;
        arbitrationPolicy: string;
        linkToDisputeSummary: string;
        tag: string;
      }
    ],
    "view"
  >;

  raiseDispute: TypedContractMethod<
    [
      ipId: AddressLike,
      arbitrationPolicy: AddressLike,
      linkToDisputeSummary: string,
      targetTag: BytesLike,
      data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [disputeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDisputeJudgement: TypedContractMethod<
    [disputeId: BigNumberish, decision: boolean, data: BytesLike],
    [void],
    "nonpayable"
  >;

  whitelistArbitrationPolicy: TypedContractMethod<
    [arbitrationPolicy: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  whitelistArbitrationRelayer: TypedContractMethod<
    [
      arbitrationPolicy: AddressLike,
      arbPolicyRelayer: AddressLike,
      allowed: boolean
    ],
    [void],
    "nonpayable"
  >;

  whitelistDisputeTags: TypedContractMethod<
    [tag: BytesLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelDispute"
  ): TypedContractMethod<
    [disputeId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [disputeId: BigNumberish],
    [
      [string, string, string, string, string] & {
        ipId: string;
        disputeInitiator: string;
        arbitrationPolicy: string;
        linkToDisputeSummary: string;
        tag: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      arbitrationPolicy: AddressLike,
      linkToDisputeSummary: string,
      targetTag: BytesLike,
      data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<[disputeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDisputeJudgement"
  ): TypedContractMethod<
    [disputeId: BigNumberish, decision: boolean, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistArbitrationPolicy"
  ): TypedContractMethod<
    [arbitrationPolicy: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistArbitrationRelayer"
  ): TypedContractMethod<
    [
      arbitrationPolicy: AddressLike,
      arbPolicyRelayer: AddressLike,
      allowed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistDisputeTags"
  ): TypedContractMethod<
    [tag: BytesLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
