/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ResolverBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCESS_CONTROLLER"
      | "IP_ACCOUNT_REGISTRY"
      | "IP_RECORD_REGISTRY"
      | "accessController"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_RECORD_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_RECORD_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface ResolverBase extends BaseContract {
  connect(runner?: ContractRunner | null): ResolverBase;
  waitForDeployment(): Promise<this>;

  interface: ResolverBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCESS_CONTROLLER: TypedContractMethod<[], [string], "view">;

  IP_ACCOUNT_REGISTRY: TypedContractMethod<[], [string], "view">;

  IP_RECORD_REGISTRY: TypedContractMethod<[], [string], "view">;

  accessController: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCESS_CONTROLLER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IP_ACCOUNT_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IP_RECORD_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accessController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;

  filters: {};
}
