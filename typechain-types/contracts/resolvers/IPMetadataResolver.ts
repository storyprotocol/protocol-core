/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IP {
  export type MetadataStruct = {
    owner: AddressLike;
    name: string;
    description: string;
    hash: BytesLike;
    registrationDate: BigNumberish;
    registrant: AddressLike;
    uri: string;
  };

  export type MetadataStructOutput = [
    owner: string,
    name: string,
    description: string,
    hash: string,
    registrationDate: bigint,
    registrant: string,
    uri: string
  ] & {
    owner: string;
    name: string;
    description: string;
    hash: string;
    registrationDate: bigint;
    registrant: string;
    uri: string;
  };

  export type MetadataRecordStruct = {
    name: string;
    description: string;
    hash: BytesLike;
    registrationDate: BigNumberish;
    registrant: AddressLike;
    uri: string;
  };

  export type MetadataRecordStructOutput = [
    name: string,
    description: string,
    hash: string,
    registrationDate: bigint,
    registrant: string,
    uri: string
  ] & {
    name: string;
    description: string;
    hash: string;
    registrationDate: bigint;
    registrant: string;
    uri: string;
  };
}

export interface IPMetadataResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCESS_CONTROLLER"
      | "IP_ACCOUNT_REGISTRY"
      | "IP_RECORD_REGISTRY"
      | "_records"
      | "accessController"
      | "description"
      | "hash"
      | "metadata"
      | "name"
      | "owner"
      | "registrant"
      | "registrationDate"
      | "setDescription"
      | "setHash"
      | "setMetadata"
      | "setName"
      | "setURI"
      | "supportsInterface"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IP_RECORD_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_records",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hash", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "registrant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationDate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDescription",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHash",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [AddressLike, IP.MetadataRecordStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IP_RECORD_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registrant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export interface IPMetadataResolver extends BaseContract {
  connect(runner?: ContractRunner | null): IPMetadataResolver;
  waitForDeployment(): Promise<this>;

  interface: IPMetadataResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCESS_CONTROLLER: TypedContractMethod<[], [string], "view">;

  IP_ACCOUNT_REGISTRY: TypedContractMethod<[], [string], "view">;

  IP_RECORD_REGISTRY: TypedContractMethod<[], [string], "view">;

  _records: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, string, string] & {
        name: string;
        description: string;
        hash: string;
        registrationDate: bigint;
        registrant: string;
        uri: string;
      }
    ],
    "view"
  >;

  accessController: TypedContractMethod<[], [string], "view">;

  description: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  hash: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  metadata: TypedContractMethod<
    [ipId: AddressLike],
    [IP.MetadataStructOutput],
    "view"
  >;

  name: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  owner: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  registrant: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  registrationDate: TypedContractMethod<[ipId: AddressLike], [bigint], "view">;

  setDescription: TypedContractMethod<
    [ipId: AddressLike, newDescription: string],
    [void],
    "nonpayable"
  >;

  setHash: TypedContractMethod<
    [ipId: AddressLike, newHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setMetadata: TypedContractMethod<
    [ipId: AddressLike, newMetadata: IP.MetadataRecordStruct],
    [void],
    "nonpayable"
  >;

  setName: TypedContractMethod<
    [ipId: AddressLike, newName: string],
    [void],
    "nonpayable"
  >;

  setURI: TypedContractMethod<
    [ipId: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  uri: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCESS_CONTROLLER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IP_ACCOUNT_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IP_RECORD_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_records"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, string, string] & {
        name: string;
        description: string;
        hash: string;
        registrationDate: bigint;
        registrant: string;
        uri: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "accessController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "metadata"
  ): TypedContractMethod<
    [ipId: AddressLike],
    [IP.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registrant"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registrationDate"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDescription"
  ): TypedContractMethod<
    [ipId: AddressLike, newDescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHash"
  ): TypedContractMethod<
    [ipId: AddressLike, newHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<
    [ipId: AddressLike, newMetadata: IP.MetadataRecordStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<
    [ipId: AddressLike, newName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<
    [ipId: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;

  filters: {};
}
