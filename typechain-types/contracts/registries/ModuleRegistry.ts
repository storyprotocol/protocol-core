/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ModuleRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_isModule"
      | "_modules"
      | "getModule"
      | "isRegistered"
      | "registerModule"
      | "removeModule"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ModuleAdded" | "ModuleRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_isModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "_modules", values: [string]): string;
  encodeFunctionData(functionFragment: "getModule", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModule",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "_isModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
}

export namespace ModuleAddedEvent {
  export type InputTuple = [name: string, module: AddressLike];
  export type OutputTuple = [name: string, module: string];
  export interface OutputObject {
    name: string;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleRemovedEvent {
  export type InputTuple = [name: string, module: AddressLike];
  export type OutputTuple = [name: string, module: string];
  export interface OutputObject {
    name: string;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ModuleRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ModuleRegistry;
  waitForDeployment(): Promise<this>;

  interface: ModuleRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _isModule: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  _modules: TypedContractMethod<[arg0: string], [string], "view">;

  getModule: TypedContractMethod<[name: string], [string], "view">;

  isRegistered: TypedContractMethod<
    [moduleAddress: AddressLike],
    [boolean],
    "view"
  >;

  registerModule: TypedContractMethod<
    [name: string, moduleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  removeModule: TypedContractMethod<[name: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_isModule"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "_modules"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "getModule"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[moduleAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerModule"
  ): TypedContractMethod<
    [name: string, moduleAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeModule"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;

  getEvent(
    key: "ModuleAdded"
  ): TypedContractEvent<
    ModuleAddedEvent.InputTuple,
    ModuleAddedEvent.OutputTuple,
    ModuleAddedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleRemoved"
  ): TypedContractEvent<
    ModuleRemovedEvent.InputTuple,
    ModuleRemovedEvent.OutputTuple,
    ModuleRemovedEvent.OutputObject
  >;

  filters: {
    "ModuleAdded(string,address)": TypedContractEvent<
      ModuleAddedEvent.InputTuple,
      ModuleAddedEvent.OutputTuple,
      ModuleAddedEvent.OutputObject
    >;
    ModuleAdded: TypedContractEvent<
      ModuleAddedEvent.InputTuple,
      ModuleAddedEvent.OutputTuple,
      ModuleAddedEvent.OutputObject
    >;

    "ModuleRemoved(string,address)": TypedContractEvent<
      ModuleRemovedEvent.InputTuple,
      ModuleRemovedEvent.OutputTuple,
      ModuleRemovedEvent.OutputObject
    >;
    ModuleRemoved: TypedContractEvent<
      ModuleRemovedEvent.InputTuple,
      ModuleRemovedEvent.OutputTuple,
      ModuleRemovedEvent.OutputObject
    >;
  };
}
