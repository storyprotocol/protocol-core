/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Licensing {
  export type FrameworkCreationParamsStruct = {
    mintingParamVerifiers: AddressLike[];
    mintingParamDefaultValues: BytesLike[];
    activationParamVerifiers: AddressLike[];
    activationParamDefaultValues: BytesLike[];
    defaultNeedsActivation: boolean;
    linkParentParamVerifiers: AddressLike[];
    linkParentParamDefaultValues: BytesLike[];
    licenseUrl: string;
  };

  export type FrameworkCreationParamsStructOutput = [
    mintingParamVerifiers: string[],
    mintingParamDefaultValues: string[],
    activationParamVerifiers: string[],
    activationParamDefaultValues: string[],
    defaultNeedsActivation: boolean,
    linkParentParamVerifiers: string[],
    linkParentParamDefaultValues: string[],
    licenseUrl: string
  ] & {
    mintingParamVerifiers: string[];
    mintingParamDefaultValues: string[];
    activationParamVerifiers: string[];
    activationParamDefaultValues: string[];
    defaultNeedsActivation: boolean;
    linkParentParamVerifiers: string[];
    linkParentParamDefaultValues: string[];
    licenseUrl: string;
  };

  export type PolicyStruct = {
    frameworkId: BigNumberish;
    mintingParamValues: BytesLike[];
    activationParamValues: BytesLike[];
    needsActivation: boolean;
    linkParentParamValues: BytesLike[];
  };

  export type PolicyStructOutput = [
    frameworkId: bigint,
    mintingParamValues: string[],
    activationParamValues: string[],
    needsActivation: boolean,
    linkParentParamValues: string[]
  ] & {
    frameworkId: bigint;
    mintingParamValues: string[];
    activationParamValues: string[];
    needsActivation: boolean;
    linkParentParamValues: string[];
  };

  export type ParameterStruct = {
    verifier: AddressLike;
    defaultValue: BytesLike;
  };

  export type ParameterStructOutput = [
    verifier: string,
    defaultValue: string
  ] & { verifier: string; defaultValue: string };

  export type FrameworkStruct = {
    mintingParams: Licensing.ParameterStruct[];
    activationParams: Licensing.ParameterStruct[];
    defaultNeedsActivation: boolean;
    linkParentParams: Licensing.ParameterStruct[];
    licenseUrl: string;
  };

  export type FrameworkStructOutput = [
    mintingParams: Licensing.ParameterStructOutput[],
    activationParams: Licensing.ParameterStructOutput[],
    defaultNeedsActivation: boolean,
    linkParentParams: Licensing.ParameterStructOutput[],
    licenseUrl: string
  ] & {
    mintingParams: Licensing.ParameterStructOutput[];
    activationParams: Licensing.ParameterStructOutput[];
    defaultNeedsActivation: boolean;
    linkParentParams: Licensing.ParameterStructOutput[];
    licenseUrl: string;
  };

  export type LicenseStruct = {
    policyId: BigNumberish;
    licensorIpIds: AddressLike[];
  };

  export type LicenseStructOutput = [
    policyId: bigint,
    licensorIpIds: string[]
  ] & { policyId: bigint; licensorIpIds: string[] };
}

export interface LicenseRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLicenseFramework"
      | "addPolicy"
      | "balanceOf"
      | "balanceOfBatch"
      | "framework"
      | "isApprovedForAll"
      | "isLicensee"
      | "isParent"
      | "isPolicyIdSetForIp"
      | "mintLicense"
      | "parentIpIds"
      | "policy"
      | "policyForIpAtIndex"
      | "policyIdForIpAtIndex"
      | "policyIdsForIp"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setParentPolicy"
      | "supportsInterface"
      | "totalFrameworks"
      | "totalParentsForIpId"
      | "totalPolicies"
      | "totalPoliciesForIp"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLicenseFramework",
    values: [Licensing.FrameworkCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addPolicy",
    values: [AddressLike, Licensing.PolicyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "framework",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLicensee",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isParent",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyIdSetForIp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicense",
    values: [Licensing.LicenseStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parentIpIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "policy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyForIpAtIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyIdForIpAtIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyIdsForIp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentPolicy",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFrameworks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParentsForIpId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPolicies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoliciesForIp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addLicenseFramework",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "framework", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLicensee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyIdSetForIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentIpIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyForIpAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyIdForIpAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyIdsForIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParentPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFrameworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParentsForIpId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoliciesForIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LicenseRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): LicenseRegistry;
  waitForDeployment(): Promise<this>;

  interface: LicenseRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLicenseFramework: TypedContractMethod<
    [fwCreation: Licensing.FrameworkCreationParamsStruct],
    [bigint],
    "nonpayable"
  >;

  addPolicy: TypedContractMethod<
    [ipId: AddressLike, pol: Licensing.PolicyStruct],
    [[bigint, bigint] & { policyId: bigint; indexOnIpId: bigint }],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  framework: TypedContractMethod<
    [frameworkId: BigNumberish],
    [Licensing.FrameworkStructOutput],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isLicensee: TypedContractMethod<
    [licenseId: BigNumberish, holder: AddressLike],
    [boolean],
    "view"
  >;

  isParent: TypedContractMethod<
    [parentIpId: AddressLike, childIpId: AddressLike],
    [boolean],
    "view"
  >;

  isPolicyIdSetForIp: TypedContractMethod<
    [ipId: AddressLike, policyId: BigNumberish],
    [boolean],
    "view"
  >;

  mintLicense: TypedContractMethod<
    [
      licenseData: Licensing.LicenseStruct,
      amount: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  parentIpIds: TypedContractMethod<[ipId: AddressLike], [string[]], "view">;

  policy: TypedContractMethod<
    [policyId: BigNumberish],
    [Licensing.PolicyStructOutput],
    "view"
  >;

  policyForIpAtIndex: TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [Licensing.PolicyStructOutput],
    "view"
  >;

  policyIdForIpAtIndex: TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  policyIdsForIp: TypedContractMethod<[ipId: AddressLike], [bigint[]], "view">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setParentPolicy: TypedContractMethod<
    [licenseId: BigNumberish, childIpId: AddressLike, holder: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalFrameworks: TypedContractMethod<[], [bigint], "view">;

  totalParentsForIpId: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "view"
  >;

  totalPolicies: TypedContractMethod<[], [bigint], "view">;

  totalPoliciesForIp: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "view"
  >;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLicenseFramework"
  ): TypedContractMethod<
    [fwCreation: Licensing.FrameworkCreationParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPolicy"
  ): TypedContractMethod<
    [ipId: AddressLike, pol: Licensing.PolicyStruct],
    [[bigint, bigint] & { policyId: bigint; indexOnIpId: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "framework"
  ): TypedContractMethod<
    [frameworkId: BigNumberish],
    [Licensing.FrameworkStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLicensee"
  ): TypedContractMethod<
    [licenseId: BigNumberish, holder: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isParent"
  ): TypedContractMethod<
    [parentIpId: AddressLike, childIpId: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPolicyIdSetForIp"
  ): TypedContractMethod<
    [ipId: AddressLike, policyId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintLicense"
  ): TypedContractMethod<
    [
      licenseData: Licensing.LicenseStruct,
      amount: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "parentIpIds"
  ): TypedContractMethod<[ipId: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "policy"
  ): TypedContractMethod<
    [policyId: BigNumberish],
    [Licensing.PolicyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyForIpAtIndex"
  ): TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [Licensing.PolicyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyIdForIpAtIndex"
  ): TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyIdsForIp"
  ): TypedContractMethod<[ipId: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParentPolicy"
  ): TypedContractMethod<
    [licenseId: BigNumberish, childIpId: AddressLike, holder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalFrameworks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalParentsForIpId"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPolicies"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPoliciesForIp"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
