/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPRecordRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IP_ACCOUNT_REGISTRY"
      | "MODULE_REGISTRY"
      | "createIPAccount"
      | "ipId"
      | "isRegistered(uint256,address,uint256)"
      | "isRegistered(address)"
      | "register"
      | "resolver(address)"
      | "resolver(uint256,address,uint256)"
      | "setResolver(uint256,address,uint256,address)"
      | "setResolver(address,address)"
      | "totalSupply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "IPAccountSet" | "IPRegistered" | "IPResolverSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODULE_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createIPAccount",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipId",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "resolver(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolver(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver(uint256,address,uint256,address)",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "IP_ACCOUNT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODULE_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIPAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolver(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolver(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver(uint256,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
}

export namespace IPAccountSetEvent {
  export type InputTuple = [
    ipId: AddressLike,
    chainId: BigNumberish,
    tokenContract: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    ipId: string,
    chainId: bigint,
    tokenContract: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    ipId: string;
    chainId: bigint;
    tokenContract: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPRegisteredEvent {
  export type InputTuple = [
    ipId: AddressLike,
    chainId: BigNumberish,
    tokenContract: AddressLike,
    tokenId: BigNumberish,
    resolver: AddressLike
  ];
  export type OutputTuple = [
    ipId: string,
    chainId: bigint,
    tokenContract: string,
    tokenId: bigint,
    resolver: string
  ];
  export interface OutputObject {
    ipId: string;
    chainId: bigint;
    tokenContract: string;
    tokenId: bigint;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPResolverSetEvent {
  export type InputTuple = [ipId: AddressLike, resolver: AddressLike];
  export type OutputTuple = [ipId: string, resolver: string];
  export interface OutputObject {
    ipId: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPRecordRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IPRecordRegistry;
  waitForDeployment(): Promise<this>;

  interface: IPRecordRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IP_ACCOUNT_REGISTRY: TypedContractMethod<[], [string], "view">;

  MODULE_REGISTRY: TypedContractMethod<[], [string], "view">;

  createIPAccount: TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;

  ipId: TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  "isRegistered(uint256,address,uint256)": TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  "isRegistered(address)": TypedContractMethod<
    [id: AddressLike],
    [boolean],
    "view"
  >;

  register: TypedContractMethod<
    [
      chainId: BigNumberish,
      tokenContract: AddressLike,
      tokenId: BigNumberish,
      resolverAddr: AddressLike,
      createAccount: boolean
    ],
    [void],
    "nonpayable"
  >;

  "resolver(address)": TypedContractMethod<[id: AddressLike], [string], "view">;

  "resolver(uint256,address,uint256)": TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  "setResolver(uint256,address,uint256,address)": TypedContractMethod<
    [
      chainId: BigNumberish,
      tokenContract: AddressLike,
      tokenId: BigNumberish,
      resolverAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "setResolver(address,address)": TypedContractMethod<
    [id: AddressLike, resolverAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IP_ACCOUNT_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MODULE_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createIPAccount"
  ): TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ipId"
  ): TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered(uint256,address,uint256)"
  ): TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered(address)"
  ): TypedContractMethod<[id: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      tokenContract: AddressLike,
      tokenId: BigNumberish,
      resolverAddr: AddressLike,
      createAccount: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolver(address)"
  ): TypedContractMethod<[id: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "resolver(uint256,address,uint256)"
  ): TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setResolver(uint256,address,uint256,address)"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      tokenContract: AddressLike,
      tokenId: BigNumberish,
      resolverAddr: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver(address,address)"
  ): TypedContractMethod<
    [id: AddressLike, resolverAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "IPAccountSet"
  ): TypedContractEvent<
    IPAccountSetEvent.InputTuple,
    IPAccountSetEvent.OutputTuple,
    IPAccountSetEvent.OutputObject
  >;
  getEvent(
    key: "IPRegistered"
  ): TypedContractEvent<
    IPRegisteredEvent.InputTuple,
    IPRegisteredEvent.OutputTuple,
    IPRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IPResolverSet"
  ): TypedContractEvent<
    IPResolverSetEvent.InputTuple,
    IPResolverSetEvent.OutputTuple,
    IPResolverSetEvent.OutputObject
  >;

  filters: {
    "IPAccountSet(address,uint256,address,uint256)": TypedContractEvent<
      IPAccountSetEvent.InputTuple,
      IPAccountSetEvent.OutputTuple,
      IPAccountSetEvent.OutputObject
    >;
    IPAccountSet: TypedContractEvent<
      IPAccountSetEvent.InputTuple,
      IPAccountSetEvent.OutputTuple,
      IPAccountSetEvent.OutputObject
    >;

    "IPRegistered(address,uint256,address,uint256,address)": TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;
    IPRegistered: TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;

    "IPResolverSet(address,address)": TypedContractEvent<
      IPResolverSetEvent.InputTuple,
      IPResolverSetEvent.OutputTuple,
      IPResolverSetEvent.OutputObject
    >;
    IPResolverSet: TypedContractEvent<
      IPResolverSetEvent.InputTuple,
      IPResolverSetEvent.OutputTuple,
      IPResolverSetEvent.OutputObject
    >;
  };
}
