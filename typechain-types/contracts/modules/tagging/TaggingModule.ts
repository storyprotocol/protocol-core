/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TaggingModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isTagged"
      | "name"
      | "removeTag"
      | "setTag"
      | "tagAtIndexForIp"
      | "tagStringAtIndexForIp"
      | "totalTagsForIp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isTagged",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTag",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTag",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tagAtIndexForIp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tagStringAtIndexForIp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTagsForIp",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "isTagged", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tagAtIndexForIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagStringAtIndexForIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTagsForIp",
    data: BytesLike
  ): Result;
}

export interface TaggingModule extends BaseContract {
  connect(runner?: ContractRunner | null): TaggingModule;
  waitForDeployment(): Promise<this>;

  interface: TaggingModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isTagged: TypedContractMethod<
    [tag: string, ipId: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  removeTag: TypedContractMethod<
    [tag: string, ipId: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setTag: TypedContractMethod<
    [tag: string, ipId: AddressLike],
    [boolean],
    "nonpayable"
  >;

  tagAtIndexForIp: TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  tagStringAtIndexForIp: TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  totalTagsForIp: TypedContractMethod<[ipId: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isTagged"
  ): TypedContractMethod<[tag: string, ipId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeTag"
  ): TypedContractMethod<
    [tag: string, ipId: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTag"
  ): TypedContractMethod<
    [tag: string, ipId: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tagAtIndexForIp"
  ): TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tagStringAtIndexForIp"
  ): TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalTagsForIp"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;

  filters: {};
}
