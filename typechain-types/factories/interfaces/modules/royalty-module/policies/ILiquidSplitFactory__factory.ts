/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILiquidSplitFactory,
  ILiquidSplitFactoryInterface,
} from "../../../../../interfaces/modules/royalty-module/policies/ILiquidSplitFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "initAllocations",
        type: "uint32[]",
      },
      {
        internalType: "uint32",
        name: "_distributorFee",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "createLiquidSplitClone",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ILiquidSplitFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidSplitFactoryInterface {
    return new Interface(_abi) as ILiquidSplitFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ILiquidSplitFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ILiquidSplitFactory;
  }
}
