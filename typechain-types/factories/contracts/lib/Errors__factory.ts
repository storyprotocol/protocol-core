/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Errors, ErrorsInterface } from "../../../contracts/lib/Errors";

const _abi = [
  {
    inputs: [],
    name: "AccessController__CallerIsNotIPAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__IPAccountIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__IPAccountIsZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__PermissionIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "AccessController__SignerIsZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__NotDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroPaymentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotDisputeInitiator",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotWhitelistedArbitrationPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotWhitelistedArbitrationRelayer",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__NotWhitelistedDisputeTag",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroArbitrationPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroArbitrationRelayer",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroDisputeTag",
    type: "error",
  },
  {
    inputs: [],
    name: "DisputeModule__ZeroLinkToDisputeSummary",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_IPAccountAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_NotYetRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_ResolverInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "IPResolver_InvalidIP",
    type: "error",
  },
  {
    inputs: [],
    name: "IPResolver_Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__EmptyLicenseUrl",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__FrameworkNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__InvalidParamVerifierType",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__LicensorDoesntHaveThisPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__LinkParentParamFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__MintParamFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__NotLicensee",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__ParamVerifierLengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__ParentIdEqualThanChild",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__PolicyAlreadySetForIpId",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseRegistry__PolicyNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleAddressNotContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleAddressZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__ModuleNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__NameAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__NameDoesNotMatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ModuleRegistry__NameEmptyString",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__AlreadySetRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyModule__ZeroRoyaltyPolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLS__NotRoyaltyModule",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLS__TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLS__ZeroLiquidSplitFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLS__ZeroLiquidSplitMain",
    type: "error",
  },
  {
    inputs: [],
    name: "RoyaltyPolicyLS__ZeroRoyaltyModule",
    type: "error",
  },
  {
    inputs: [],
    name: "TaggingModule__DstIpIdDoesNotHaveDstTag",
    type: "error",
  },
  {
    inputs: [],
    name: "TaggingModule__InvalidRelationTypeName",
    type: "error",
  },
  {
    inputs: [],
    name: "TaggingModule__RelationTypeAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "TaggingModule__RelationTypeDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "TaggingModule__SrcIpIdDoesNotHaveSrcTag",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c796ab921c30defb53373b74786d41dcf9c9c2bb9a76ccc7044bea167bf420964736f6c63430008170033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
