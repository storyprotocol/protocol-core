/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  ArbitrationPolicySP,
  ArbitrationPolicySPInterface,
} from "../../../../../contracts/modules/dispute-module/policies/ArbitrationPolicySP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_disputeModule",
        type: "address",
      },
      {
        internalType: "address",
        name: "_paymentToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_arbitrationPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__NotDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroDisputeModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitrationPolicySP__ZeroPaymentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "ARBITRATION_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DISPUTE_MODULE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAYMENT_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onDisputeCancel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_disputeId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_decision",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onDisputeJudgement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onRaiseDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b506040516200103d3803806200103d833981810160405281019062000037919062000223565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200009e576040517f5285268500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000105576040517f5bfe7f3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060c081815250505050506200027f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b08262000183565b9050919050565b620001c281620001a3565b8114620001ce57600080fd5b50565b600081519050620001e281620001b7565b92915050565b6000819050919050565b620001fd81620001e8565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b6000806000606084860312156200023f576200023e6200017e565b5b60006200024f86828701620001d1565b93505060206200026286828701620001d1565b925050604062000275868287016200020c565b9150509250925092565b60805160a05160c051610d56620002e760003960008181610282015281816102f1015261044e0152600081816102a301528181610315015261046f015260008181610151015281816101de01528181610339015281816103c401526104bb0152610d566000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063877c86fb1161005b578063877c86fb146100d8578063f52a5233146100f6578063f60be85414610112578063f943f0901461012e5761007d565b80632e1a7d4d146100825780636152325c1461009e57806366493058146100ba575b600080fd5b61009c6004803603810190610097919061086c565b61014c565b005b6100b860048036038101906100b39190610936565b61014f565b005b6100c26102ef565b6040516100cf91906109b9565b60405180910390f35b6100e0610313565b6040516100ed9190610a15565b60405180910390f35b610110600480360381019061010b9190610a5c565b610337565b005b61012c60048036038101906101279190610ad0565b6103c2565b005b6101366104b9565b6040516101439190610a15565b60405180910390f35b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d4576040517f75c1ca5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82156102e95760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663564a565d866040518263ffffffff1660e01b815260040161023591906109b9565b60a060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610b7b565b5050509150506102e7817f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166104dd9092919063ffffffff16565b505b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bc576040517f75c1ca5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610447576040517f75c1ca5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104b483307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661055c909392919063ffffffff16565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610557838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610510929190610bf6565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506105de565b505050565b6105d8848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161059193929190610c1f565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506105de565b50505050565b6000610609828473ffffffffffffffffffffffffffffffffffffffff1661067590919063ffffffff16565b9050600081511415801561062e57508080602001905181019061062c9190610c6b565b155b1561067057826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016106679190610a15565b60405180910390fd5b505050565b60606106838383600061068b565b905092915050565b6060814710156106d257306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016106c99190610a15565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516106fb9190610d09565b60006040518083038185875af1925050503d8060008114610738576040519150601f19603f3d011682016040523d82523d6000602084013e61073d565b606091505b509150915061074d868383610758565b925050509392505050565b60608261076d57610768826107e7565b6107df565b60008251148015610795575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156107d757836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016107ce9190610a15565b60405180910390fd5b8190506107e0565b5b9392505050565b6000815111156107fa5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b600080fd5b6000819050919050565b61084981610836565b811461085457600080fd5b50565b60008135905061086681610840565b92915050565b6000602082840312156108825761088161082c565b5b600061089084828501610857565b91505092915050565b60008115159050919050565b6108ae81610899565b81146108b957600080fd5b50565b6000813590506108cb816108a5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108f6576108f56108d1565b5b8235905067ffffffffffffffff811115610913576109126108d6565b5b60208301915083600182028301111561092f5761092e6108db565b5b9250929050565b600080600080606085870312156109505761094f61082c565b5b600061095e87828801610857565b945050602061096f878288016108bc565b935050604085013567ffffffffffffffff8111156109905761098f610831565b5b61099c878288016108e0565b925092505092959194509250565b6109b381610836565b82525050565b60006020820190506109ce60008301846109aa565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ff826109d4565b9050919050565b610a0f816109f4565b82525050565b6000602082019050610a2a6000830184610a06565b92915050565b610a39816109f4565b8114610a4457600080fd5b50565b600081359050610a5681610a30565b92915050565b60008060008060608587031215610a7657610a7561082c565b5b6000610a8487828801610a47565b9450506020610a9587828801610857565b935050604085013567ffffffffffffffff811115610ab657610ab5610831565b5b610ac2878288016108e0565b925092505092959194509250565b600080600060408486031215610ae957610ae861082c565b5b6000610af786828701610a47565b935050602084013567ffffffffffffffff811115610b1857610b17610831565b5b610b24868287016108e0565b92509250509250925092565b600081519050610b3f81610a30565b92915050565b6000819050919050565b610b5881610b45565b8114610b6357600080fd5b50565b600081519050610b7581610b4f565b92915050565b600080600080600060a08688031215610b9757610b9661082c565b5b6000610ba588828901610b30565b9550506020610bb688828901610b30565b9450506040610bc788828901610b30565b9350506060610bd888828901610b66565b9250506080610be988828901610b66565b9150509295509295909350565b6000604082019050610c0b6000830185610a06565b610c1860208301846109aa565b9392505050565b6000606082019050610c346000830186610a06565b610c416020830185610a06565b610c4e60408301846109aa565b949350505050565b600081519050610c65816108a5565b92915050565b600060208284031215610c8157610c8061082c565b5b6000610c8f84828501610c56565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015610ccc578082015181840152602081019050610cb1565b60008484015250505050565b6000610ce382610c98565b610ced8185610ca3565b9350610cfd818560208601610cae565b80840191505092915050565b6000610d158284610cd8565b91508190509291505056fea2646970667358221220e04b21f5c55ce4bbcf50f0acbd1d963ab439e939d5b5e84ecf9d8b29f15c8f6364736f6c63430008170033";

type ArbitrationPolicySPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitrationPolicySPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbitrationPolicySP__factory extends ContractFactory {
  constructor(...args: ArbitrationPolicySPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _disputeModule: AddressLike,
    _paymentToken: AddressLike,
    _arbitrationPrice: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _disputeModule,
      _paymentToken,
      _arbitrationPrice,
      overrides || {}
    );
  }
  override deploy(
    _disputeModule: AddressLike,
    _paymentToken: AddressLike,
    _arbitrationPrice: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _disputeModule,
      _paymentToken,
      _arbitrationPrice,
      overrides || {}
    ) as Promise<
      ArbitrationPolicySP & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ArbitrationPolicySP__factory {
    return super.connect(runner) as ArbitrationPolicySP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrationPolicySPInterface {
    return new Interface(_abi) as ArbitrationPolicySPInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArbitrationPolicySP {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ArbitrationPolicySP;
  }
}
