/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TaggingModule,
  TaggingModuleInterface,
} from "../../../../contracts/modules/tagging/TaggingModule";

const _abi = [
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "isTagged",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "removeTag",
    outputs: [
      {
        internalType: "bool",
        name: "removed",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "setTag",
    outputs: [
      {
        internalType: "bool",
        name: "added",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tagAtIndexForIp",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tagStringAtIndexForIp",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "totalTagsForIp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600d81526020017f54616767696e674d6f64756c6500000000000000000000000000000000000000815250600090816200004a9190620002d9565b503480156200005857600080fd5b50620003c0565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620000e157607f821691505b602082108103620000f757620000f662000099565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000122565b6200016d868362000122565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001ba620001b4620001ae8462000185565b6200018f565b62000185565b9050919050565b6000819050919050565b620001d68362000199565b620001ee620001e582620001c1565b8484546200012f565b825550505050565b600090565b62000205620001f6565b62000212818484620001cb565b505050565b5b818110156200023a576200022e600082620001fb565b60018101905062000218565b5050565b601f82111562000289576200025381620000fd565b6200025e8462000112565b810160208510156200026e578190505b620002866200027d8562000112565b83018262000217565b50505b505050565b600082821c905092915050565b6000620002ae600019846008026200028e565b1980831691505092915050565b6000620002c983836200029b565b9150826002028217905092915050565b620002e4826200005f565b67ffffffffffffffff8111156200030057620002ff6200006a565b5b6200030c8254620000c8565b620003198282856200023e565b600060209050601f8311600181146200035157600084156200033c578287015190505b620003488582620002bb565b865550620003b8565b601f1984166200036186620000fd565b60005b828110156200038b5784890151825560018201915060208501945060208101905062000364565b86831015620003ab5784890151620003a7601f8916826200029b565b8355505b6001600288020188555050505b505050505050565b610e2680620003d06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a169dd2a1161005b578063a169dd2a14610100578063c3a5529614610130578063e94bd50414610160578063e96fe8ed146101905761007d565b806306fdde0314610082578063647cb3cc146100a05780637a7fff70146100d0575b600080fd5b61008a6101c0565b6040516100979190610976565b60405180910390f35b6100ba60048036038101906100b59190610a36565b61024e565b6040516100c79190610a8f565b60405180910390f35b6100ea60048036038101906100e59190610b0f565b6102a9565b6040516100f79190610b8a565b60405180910390f35b61011a60048036038101906101159190610a36565b610351565b6040516101279190610976565b60405180910390f35b61014a60048036038101906101459190610b0f565b6103b4565b6040516101579190610b8a565b60405180910390f35b61017a60048036038101906101759190610b0f565b61045c565b6040516101879190610b8a565b60405180910390f35b6101aa60048036038101906101a59190610ba5565b610504565b6040516101b79190610be1565b60405180910390f35b600080546101cd90610c2b565b80601f01602080910402602001604051908101604052809291908181526020018280546101f990610c2b565b80156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b505050505081565b60006102a182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061055490919063ffffffff16565b905092915050565b60006103486102fb85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061056b565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061057d90919063ffffffff16565b90509392505050565b60606103ac6103a783600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061055490919063ffffffff16565b610594565b905092915050565b600061045361040685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061056b565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061060890919063ffffffff16565b90509392505050565b60006104fb6104ae85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061056b565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061061f90919063ffffffff16565b90509392505050565b600061054d600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610636565b9050919050565b6000610563836000018361064b565b905092915050565b600061057682610676565b9050919050565b600061058c83600001836106de565b905092915050565b606060006105a18361074e565b90506000602067ffffffffffffffff8111156105c0576105bf610c5c565b5b6040519080825280601f01601f1916602001820160405280156105f25781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b6000610617836000018361079e565b905092915050565b600061062e83600001836107c1565b905092915050565b6000610644826000016108d5565b9050919050565b600082600001828154811061066357610662610c8b565b5b9060005260206000200154905092915050565b600080829050601f815111156106c357826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016106ba9190610976565b60405180910390fd5b8051816106cf90610cf7565b60001c1760001b915050919050565b60006106ea838361079e565b610743578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610748565b600090505b92915050565b60008060ff8360001c169050601f811115610795576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146108c95760006001826107f39190610d8d565b905060006001866000018054905061080b9190610d8d565b905080821461087a57600086600001828154811061082c5761082b610c8b565b5b90600052602060002001549050808760000184815481106108505761084f610c8b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061088e5761088d610dc1565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108cf565b60009150505b92915050565b600081600001805490509050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610920578082015181840152602081019050610905565b60008484015250505050565b6000601f19601f8301169050919050565b6000610948826108e6565b61095281856108f1565b9350610962818560208601610902565b61096b8161092c565b840191505092915050565b60006020820190508181036000830152610990818461093d565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109cd826109a2565b9050919050565b6109dd816109c2565b81146109e857600080fd5b50565b6000813590506109fa816109d4565b92915050565b6000819050919050565b610a1381610a00565b8114610a1e57600080fd5b50565b600081359050610a3081610a0a565b92915050565b60008060408385031215610a4d57610a4c610998565b5b6000610a5b858286016109eb565b9250506020610a6c85828601610a21565b9150509250929050565b6000819050919050565b610a8981610a76565b82525050565b6000602082019050610aa46000830184610a80565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610acf57610ace610aaa565b5b8235905067ffffffffffffffff811115610aec57610aeb610aaf565b5b602083019150836001820283011115610b0857610b07610ab4565b5b9250929050565b600080600060408486031215610b2857610b27610998565b5b600084013567ffffffffffffffff811115610b4657610b4561099d565b5b610b5286828701610ab9565b93509350506020610b65868287016109eb565b9150509250925092565b60008115159050919050565b610b8481610b6f565b82525050565b6000602082019050610b9f6000830184610b7b565b92915050565b600060208284031215610bbb57610bba610998565b5b6000610bc9848285016109eb565b91505092915050565b610bdb81610a00565b82525050565b6000602082019050610bf66000830184610bd2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c4357607f821691505b602082108103610c5657610c55610bfc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b6000819050602082019050919050565b6000610ce18251610a76565b80915050919050565b600082821b905092915050565b6000610d0282610cba565b82610d0c84610cc5565b9050610d1781610cd5565b92506020821015610d5757610d527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802610cea565b831692505b5050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9882610a00565b9150610da383610a00565b9250828203905081811115610dbb57610dba610d5e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212203a2aae26d2d3b7f667ecd4c9a983dd5d1c10e58d33949b459282ef3c812cad5364736f6c63430008170033";

type TaggingModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TaggingModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TaggingModule__factory extends ContractFactory {
  constructor(...args: TaggingModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TaggingModule & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TaggingModule__factory {
    return super.connect(runner) as TaggingModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TaggingModuleInterface {
    return new Interface(_abi) as TaggingModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TaggingModule {
    return new Contract(address, _abi, runner) as unknown as TaggingModule;
  }
}
