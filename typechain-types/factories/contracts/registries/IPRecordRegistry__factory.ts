/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  IPRecordRegistry,
  IPRecordRegistryInterface,
} from "../../../contracts/registries/IPRecordRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "moduleRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "ipAccountRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_IPAccountAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_NotYetRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_ResolverInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "IPRecordRegistry_Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "IPAccountSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "resolver",
        type: "address",
      },
    ],
    name: "IPRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "resolver",
        type: "address",
      },
    ],
    name: "IPResolverSet",
    type: "event",
  },
  {
    inputs: [],
    name: "IP_ACCOUNT_REGISTRY",
    outputs: [
      {
        internalType: "contract IIPAccountRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MODULE_REGISTRY",
    outputs: [
      {
        internalType: "contract IModuleRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "createIPAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ipId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "resolverAddr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "createAccount",
        type: "bool",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
    ],
    name: "resolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "resolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "resolverAddr",
        type: "address",
      },
    ],
    name: "setResolver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "id",
        type: "address",
      },
      {
        internalType: "address",
        name: "resolverAddr",
        type: "address",
      },
    ],
    name: "setResolver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600080553480156200001557600080fd5b50604051620016333803806200163383398181016040528101906200003b919062000115565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000dd82620000b0565b9050919050565b620000ef81620000d0565b8114620000fb57600080fd5b50565b6000815190506200010f81620000e4565b92915050565b600080604083850312156200012f576200012e620000ab565b5b60006200013f85828601620000fe565b92505060206200015285828601620000fe565b9150509250929050565b60805160a051611487620001ac60003960008181610350015281816104a30152818161078501526107c00152600081816106f801528181610b0201528181610c840152610de801526114876000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b95ddb5211610071578063b95ddb521461018d578063c067e2ae146101ab578063c3c5a547146101c7578063ca082751146101f7578063d10c287b14610227578063d26bb83f14610257576100b4565b8063034d0e3f146100b957806318160ddd146100e95780634ad7724214610107578063597e99cb14610123578063702acd851461013f5780639787b6181461015d575b600080fd5b6100d360048036038101906100ce9190610f78565b610287565b6040516100e09190610fe6565b60405180910390f35b6100f1610331565b6040516100fe9190611010565b60405180910390f35b610121600480360381019061011c919061102b565b610337565b005b61013d60048036038101906101389190611092565b61048a565b005b6101476106f6565b6040516101549190611131565b60405180910390f35b6101776004803603810190610172919061114c565b61071a565b6040516101849190611188565b60405180910390f35b610195610783565b6040516101a291906111c4565b60405180910390f35b6101c560048036038101906101c0919061120b565b6107a7565b005b6101e160048036038101906101dc919061114c565b610a65565b6040516101ee9190610fe6565b60405180910390f35b610211600480360381019061020c9190610f78565b610afd565b60405161021e9190611188565b60405180910390f35b610241600480360381019061023c9190610f78565b610c06565b60405161024e9190611188565b60405180910390f35b610271600480360381019061026c9190610f78565b610c80565b60405161027e9190611188565b60405180910390f35b600080610295858585610c80565b9050600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159150509392505050565b60005481565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166308f523d86040518060400160405280601381526020017f524547495354524154494f4e5f4d4f44554c45000000000000000000000000008152506040518263ffffffff1660e01b81526004016103dc9190611316565b602060405180830381865afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d919061134d565b73ffffffffffffffffffffffffffffffffffffffff161461046a576040517f2b1189d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610477858585610c80565b9050610483818361048a565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166308f523d86040518060400160405280601381526020017f524547495354524154494f4e5f4d4f44554c45000000000000000000000000008152506040518263ffffffff1660e01b815260040161052f9190611316565b602060405180830381865afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610570919061134d565b73ffffffffffffffffffffffffffffffffffffffff16146105bd576040517f2b1189d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610623576040517fcb361e2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106e8576040517fd63e988500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f28282610d29565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166308f523d86040518060400160405280601381526020017f524547495354524154494f4e5f4d4f44554c45000000000000000000000000008152506040518263ffffffff1660e01b815260040161084c9190611316565b602060405180830381865afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d919061134d565b73ffffffffffffffffffffffffffffffffffffffff16146108da576040517f2b1189d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108e7868686610c80565b9050600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109ae576040517f129cba6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff163b1480156109d75750825b156109e9576109e7878787610de4565b505b6109f38285610d29565b600080815480929190610a05906113a9565b9190505550848673ffffffffffffffffffffffffffffffffffffffff16887fe8b4e5e3b3081bb5e138b90953bc4b8d4bd4a144a957791f2c1164211f3fffdc8588604051610a549291906113f1565b60405180910390a450505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166387020f958686866040518463ffffffff1660e01b8152600401610b5d9392919061141a565b602060405180830381865afa158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e919061134d565b905060008173ffffffffffffffffffffffffffffffffffffffff163b14610bf1576040517f46f5ea3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bfc858585610de4565b9150509392505050565b600080610c14858585610c80565b9050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166387020f958585856040518463ffffffff1660e01b8152600401610cdf9392919061141a565b602060405180830381865afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d20919061134d565b90509392505050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f45d82cad942fa2e4cfe12a8e0c0b8ecb938b1c95496042dc75f0ecf94cc794f28282604051610dd89291906113f1565b60405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db4fdb318585856040518463ffffffff1660e01b8152600401610e439392919061141a565b6020604051808303816000875af1158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e86919061134d565b9050818373ffffffffffffffffffffffffffffffffffffffff16857fb0f8a29d221d596b0eb4fbccfafbd58102fe1bd92f55e6d5b19cd7393c1d577e84604051610ed09190611188565b60405180910390a49392505050565b600080fd5b6000819050919050565b610ef781610ee4565b8114610f0257600080fd5b50565b600081359050610f1481610eee565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4582610f1a565b9050919050565b610f5581610f3a565b8114610f6057600080fd5b50565b600081359050610f7281610f4c565b92915050565b600080600060608486031215610f9157610f90610edf565b5b6000610f9f86828701610f05565b9350506020610fb086828701610f63565b9250506040610fc186828701610f05565b9150509250925092565b60008115159050919050565b610fe081610fcb565b82525050565b6000602082019050610ffb6000830184610fd7565b92915050565b61100a81610ee4565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806000806080858703121561104557611044610edf565b5b600061105387828801610f05565b945050602061106487828801610f63565b935050604061107587828801610f05565b925050606061108687828801610f63565b91505092959194509250565b600080604083850312156110a9576110a8610edf565b5b60006110b785828601610f63565b92505060206110c885828601610f63565b9150509250929050565b6000819050919050565b60006110f76110f26110ed84610f1a565b6110d2565b610f1a565b9050919050565b6000611109826110dc565b9050919050565b600061111b826110fe565b9050919050565b61112b81611110565b82525050565b60006020820190506111466000830184611122565b92915050565b60006020828403121561116257611161610edf565b5b600061117084828501610f63565b91505092915050565b61118281610f3a565b82525050565b600060208201905061119d6000830184611179565b92915050565b60006111ae826110fe565b9050919050565b6111be816111a3565b82525050565b60006020820190506111d960008301846111b5565b92915050565b6111e881610fcb565b81146111f357600080fd5b50565b600081359050611205816111df565b92915050565b600080600080600060a0868803121561122757611226610edf565b5b600061123588828901610f05565b955050602061124688828901610f63565b945050604061125788828901610f05565b935050606061126888828901610f63565b9250506080611279888289016111f6565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b838110156112c05780820151818401526020810190506112a5565b60008484015250505050565b6000601f19601f8301169050919050565b60006112e882611286565b6112f28185611291565b93506113028185602086016112a2565b61130b816112cc565b840191505092915050565b6000602082019050818103600083015261133081846112dd565b905092915050565b60008151905061134781610f4c565b92915050565b60006020828403121561136357611362610edf565b5b600061137184828501611338565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b482610ee4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113e6576113e561137a565b5b600182019050919050565b60006040820190506114066000830185611179565b6114136020830184611179565b9392505050565b600060608201905061142f6000830186611001565b61143c6020830185611179565b6114496040830184611001565b94935050505056fea264697066735822122045ee3016e4e702052ff9cb25dbe2aed75d9693ebfab20f427f37a91aa44f7dc864736f6c63430008170033";

type IPRecordRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IPRecordRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IPRecordRegistry__factory extends ContractFactory {
  constructor(...args: IPRecordRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    moduleRegistry: AddressLike,
    ipAccountRegistry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      moduleRegistry,
      ipAccountRegistry,
      overrides || {}
    );
  }
  override deploy(
    moduleRegistry: AddressLike,
    ipAccountRegistry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      moduleRegistry,
      ipAccountRegistry,
      overrides || {}
    ) as Promise<
      IPRecordRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): IPRecordRegistry__factory {
    return super.connect(runner) as IPRecordRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IPRecordRegistryInterface {
    return new Interface(_abi) as IPRecordRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPRecordRegistry {
    return new Contract(address, _abi, runner) as unknown as IPRecordRegistry;
  }
}
